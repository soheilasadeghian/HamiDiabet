#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HamiDiabetWebApi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HamiDiabet")]
	public partial class DataAccessDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertcityTbl(cityTbl instance);
    partial void UpdatecityTbl(cityTbl instance);
    partial void DeletecityTbl(cityTbl instance);
    partial void InsertwalletTbl(walletTbl instance);
    partial void UpdatewalletTbl(walletTbl instance);
    partial void DeletewalletTbl(walletTbl instance);
    partial void Insertclass_userTbl(class_userTbl instance);
    partial void Updateclass_userTbl(class_userTbl instance);
    partial void Deleteclass_userTbl(class_userTbl instance);
    partial void InsertclassDetailTbl(classDetailTbl instance);
    partial void UpdateclassDetailTbl(classDetailTbl instance);
    partial void DeleteclassDetailTbl(classDetailTbl instance);
    partial void InsertclassGroupTbl(classGroupTbl instance);
    partial void UpdateclassGroupTbl(classGroupTbl instance);
    partial void DeleteclassGroupTbl(classGroupTbl instance);
    partial void InsertclassSubGroupTbl(classSubGroupTbl instance);
    partial void UpdateclassSubGroupTbl(classSubGroupTbl instance);
    partial void DeleteclassSubGroupTbl(classSubGroupTbl instance);
    partial void InsertclassTbl(classTbl instance);
    partial void UpdateclassTbl(classTbl instance);
    partial void DeleteclassTbl(classTbl instance);
    partial void Insertclinic_practitionTbl(clinic_practitionTbl instance);
    partial void Updateclinic_practitionTbl(clinic_practitionTbl instance);
    partial void Deleteclinic_practitionTbl(clinic_practitionTbl instance);
    partial void Insertclinic_product_productGroupTbl(clinic_product_productGroupTbl instance);
    partial void Updateclinic_product_productGroupTbl(clinic_product_productGroupTbl instance);
    partial void Deleteclinic_product_productGroupTbl(clinic_product_productGroupTbl instance);
    partial void Insertclinic_productTbl(clinic_productTbl instance);
    partial void Updateclinic_productTbl(clinic_productTbl instance);
    partial void Deleteclinic_productTbl(clinic_productTbl instance);
    partial void Insertclinic_serviceTbl(clinic_serviceTbl instance);
    partial void Updateclinic_serviceTbl(clinic_serviceTbl instance);
    partial void Deleteclinic_serviceTbl(clinic_serviceTbl instance);
    partial void InsertclinicTbl(clinicTbl instance);
    partial void UpdateclinicTbl(clinicTbl instance);
    partial void DeleteclinicTbl(clinicTbl instance);
    partial void InsertcontentCommentTbl(contentCommentTbl instance);
    partial void UpdatecontentCommentTbl(contentCommentTbl instance);
    partial void DeletecontentCommentTbl(contentCommentTbl instance);
    partial void InsertcontentDetailTbl(contentDetailTbl instance);
    partial void UpdatecontentDetailTbl(contentDetailTbl instance);
    partial void DeletecontentDetailTbl(contentDetailTbl instance);
    partial void InsertcontentGroupTbl(contentGroupTbl instance);
    partial void UpdatecontentGroupTbl(contentGroupTbl instance);
    partial void DeletecontentGroupTbl(contentGroupTbl instance);
    partial void InsertcontentLikeTbl(contentLikeTbl instance);
    partial void UpdatecontentLikeTbl(contentLikeTbl instance);
    partial void DeletecontentLikeTbl(contentLikeTbl instance);
    partial void InsertcontentSubGroupTbl(contentSubGroupTbl instance);
    partial void UpdatecontentSubGroupTbl(contentSubGroupTbl instance);
    partial void DeletecontentSubGroupTbl(contentSubGroupTbl instance);
    partial void InsertcontentTbl(contentTbl instance);
    partial void UpdatecontentTbl(contentTbl instance);
    partial void DeletecontentTbl(contentTbl instance);
    partial void Insertdoctor_product_productGroupTbl(doctor_product_productGroupTbl instance);
    partial void Updatedoctor_product_productGroupTbl(doctor_product_productGroupTbl instance);
    partial void Deletedoctor_product_productGroupTbl(doctor_product_productGroupTbl instance);
    partial void Insertdoctor_productTbl(doctor_productTbl instance);
    partial void Updatedoctor_productTbl(doctor_productTbl instance);
    partial void Deletedoctor_productTbl(doctor_productTbl instance);
    partial void Insertdoctor_serviceTbl(doctor_serviceTbl instance);
    partial void Updatedoctor_serviceTbl(doctor_serviceTbl instance);
    partial void Deletedoctor_serviceTbl(doctor_serviceTbl instance);
    partial void InsertdoctorTbl(doctorTbl instance);
    partial void UpdatedoctorTbl(doctorTbl instance);
    partial void DeletedoctorTbl(doctorTbl instance);
    partial void InsertdocumentTbl(documentTbl instance);
    partial void UpdatedocumentTbl(documentTbl instance);
    partial void DeletedocumentTbl(documentTbl instance);
    partial void InsertdocumentTypeTbl(documentTypeTbl instance);
    partial void UpdatedocumentTypeTbl(documentTypeTbl instance);
    partial void DeletedocumentTypeTbl(documentTypeTbl instance);
    partial void InserteducationTbl(educationTbl instance);
    partial void UpdateeducationTbl(educationTbl instance);
    partial void DeleteeducationTbl(educationTbl instance);
    partial void Insertequipment_product_productGroupTbl(equipment_product_productGroupTbl instance);
    partial void Updateequipment_product_productGroupTbl(equipment_product_productGroupTbl instance);
    partial void Deleteequipment_product_productGroupTbl(equipment_product_productGroupTbl instance);
    partial void Insertequipment_productTbl(equipment_productTbl instance);
    partial void Updateequipment_productTbl(equipment_productTbl instance);
    partial void Deleteequipment_productTbl(equipment_productTbl instance);
    partial void Insertequipment_serviceTbl(equipment_serviceTbl instance);
    partial void Updateequipment_serviceTbl(equipment_serviceTbl instance);
    partial void Deleteequipment_serviceTbl(equipment_serviceTbl instance);
    partial void InsertequipmentTbl(equipmentTbl instance);
    partial void UpdateequipmentTbl(equipmentTbl instance);
    partial void DeleteequipmentTbl(equipmentTbl instance);
    partial void InsertguarantyTypeTbl(guarantyTypeTbl instance);
    partial void UpdateguarantyTypeTbl(guarantyTypeTbl instance);
    partial void DeleteguarantyTypeTbl(guarantyTypeTbl instance);
    partial void InsertinsuranceTbl(insuranceTbl instance);
    partial void UpdateinsuranceTbl(insuranceTbl instance);
    partial void DeleteinsuranceTbl(insuranceTbl instance);
    partial void Insertmessage_userGroupTbl(message_userGroupTbl instance);
    partial void Updatemessage_userGroupTbl(message_userGroupTbl instance);
    partial void Deletemessage_userGroupTbl(message_userGroupTbl instance);
    partial void Insertmessage_userTbl(message_userTbl instance);
    partial void Updatemessage_userTbl(message_userTbl instance);
    partial void Deletemessage_userTbl(message_userTbl instance);
    partial void InsertmessageTbl(messageTbl instance);
    partial void UpdatemessageTbl(messageTbl instance);
    partial void DeletemessageTbl(messageTbl instance);
    partial void Insertngo_product_productGroupTbl(ngo_product_productGroupTbl instance);
    partial void Updatengo_product_productGroupTbl(ngo_product_productGroupTbl instance);
    partial void Deletengo_product_productGroupTbl(ngo_product_productGroupTbl instance);
    partial void Insertngo_productTbl(ngo_productTbl instance);
    partial void Updatengo_productTbl(ngo_productTbl instance);
    partial void Deletengo_productTbl(ngo_productTbl instance);
    partial void Insertngo_serviceTbl(ngo_serviceTbl instance);
    partial void Updatengo_serviceTbl(ngo_serviceTbl instance);
    partial void Deletengo_serviceTbl(ngo_serviceTbl instance);
    partial void InsertngoTbl(ngoTbl instance);
    partial void UpdatengoTbl(ngoTbl instance);
    partial void DeletengoTbl(ngoTbl instance);
    partial void InsertorderTbl(orderTbl instance);
    partial void UpdateorderTbl(orderTbl instance);
    partial void DeleteorderTbl(orderTbl instance);
    partial void InsertpackageTbl(packageTbl instance);
    partial void UpdatepackageTbl(packageTbl instance);
    partial void DeletepackageTbl(packageTbl instance);
    partial void Insertpatient_doctorTbl(patient_doctorTbl instance);
    partial void Updatepatient_doctorTbl(patient_doctorTbl instance);
    partial void Deletepatient_doctorTbl(patient_doctorTbl instance);
    partial void Insertpatient_insuranceTbl(patient_insuranceTbl instance);
    partial void Updatepatient_insuranceTbl(patient_insuranceTbl instance);
    partial void Deletepatient_insuranceTbl(patient_insuranceTbl instance);
    partial void InsertpatientTbl(patientTbl instance);
    partial void UpdatepatientTbl(patientTbl instance);
    partial void DeletepatientTbl(patientTbl instance);
    partial void InsertpaymentTbl(paymentTbl instance);
    partial void UpdatepaymentTbl(paymentTbl instance);
    partial void DeletepaymentTbl(paymentTbl instance);
    partial void InsertpermissionTbl(permissionTbl instance);
    partial void UpdatepermissionTbl(permissionTbl instance);
    partial void DeletepermissionTbl(permissionTbl instance);
    partial void InsertpractitionTbl(practitionTbl instance);
    partial void UpdatepractitionTbl(practitionTbl instance);
    partial void DeletepractitionTbl(practitionTbl instance);
    partial void InsertproductCategoryTbl(productCategoryTbl instance);
    partial void UpdateproductCategoryTbl(productCategoryTbl instance);
    partial void DeleteproductCategoryTbl(productCategoryTbl instance);
    partial void InsertproductGroupTbl(productGroupTbl instance);
    partial void UpdateproductGroupTbl(productGroupTbl instance);
    partial void DeleteproductGroupTbl(productGroupTbl instance);
    partial void InsertproductTbl(productTbl instance);
    partial void UpdateproductTbl(productTbl instance);
    partial void DeleteproductTbl(productTbl instance);
    partial void InsertprovinceTbl(provinceTbl instance);
    partial void UpdateprovinceTbl(provinceTbl instance);
    partial void DeleteprovinceTbl(provinceTbl instance);
    partial void Insertrole_permissionTbl(role_permissionTbl instance);
    partial void Updaterole_permissionTbl(role_permissionTbl instance);
    partial void Deleterole_permissionTbl(role_permissionTbl instance);
    partial void InsertroleTbl(roleTbl instance);
    partial void UpdateroleTbl(roleTbl instance);
    partial void DeleteroleTbl(roleTbl instance);
    partial void InsertserviceTbl(serviceTbl instance);
    partial void UpdateserviceTbl(serviceTbl instance);
    partial void DeleteserviceTbl(serviceTbl instance);
    partial void InsertsessionTbl(sessionTbl instance);
    partial void UpdatesessionTbl(sessionTbl instance);
    partial void DeletesessionTbl(sessionTbl instance);
    partial void InsertsettingTbl(settingTbl instance);
    partial void UpdatesettingTbl(settingTbl instance);
    partial void DeletesettingTbl(settingTbl instance);
    partial void InserttokenTbl(tokenTbl instance);
    partial void UpdatetokenTbl(tokenTbl instance);
    partial void DeletetokenTbl(tokenTbl instance);
    partial void Insertuser_userGroupTbl(user_userGroupTbl instance);
    partial void Updateuser_userGroupTbl(user_userGroupTbl instance);
    partial void Deleteuser_userGroupTbl(user_userGroupTbl instance);
    partial void InsertuserGroupTbl(userGroupTbl instance);
    partial void UpdateuserGroupTbl(userGroupTbl instance);
    partial void DeleteuserGroupTbl(userGroupTbl instance);
    partial void InsertuserTbl(userTbl instance);
    partial void UpdateuserTbl(userTbl instance);
    partial void DeleteuserTbl(userTbl instance);
    #endregion
		
		public DataAccessDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HamiDiabetConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<cityTbl> cityTbls
		{
			get
			{
				return this.GetTable<cityTbl>();
			}
		}
		
		public System.Data.Linq.Table<walletTbl> walletTbls
		{
			get
			{
				return this.GetTable<walletTbl>();
			}
		}
		
		public System.Data.Linq.Table<class_userTbl> class_userTbls
		{
			get
			{
				return this.GetTable<class_userTbl>();
			}
		}
		
		public System.Data.Linq.Table<classDetailTbl> classDetailTbls
		{
			get
			{
				return this.GetTable<classDetailTbl>();
			}
		}
		
		public System.Data.Linq.Table<classGroupTbl> classGroupTbls
		{
			get
			{
				return this.GetTable<classGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<classSubGroupTbl> classSubGroupTbls
		{
			get
			{
				return this.GetTable<classSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<classTbl> classTbls
		{
			get
			{
				return this.GetTable<classTbl>();
			}
		}
		
		public System.Data.Linq.Table<clinic_practitionTbl> clinic_practitionTbls
		{
			get
			{
				return this.GetTable<clinic_practitionTbl>();
			}
		}
		
		public System.Data.Linq.Table<clinic_product_productGroupTbl> clinic_product_productGroupTbls
		{
			get
			{
				return this.GetTable<clinic_product_productGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<clinic_productTbl> clinic_productTbls
		{
			get
			{
				return this.GetTable<clinic_productTbl>();
			}
		}
		
		public System.Data.Linq.Table<clinic_serviceTbl> clinic_serviceTbls
		{
			get
			{
				return this.GetTable<clinic_serviceTbl>();
			}
		}
		
		public System.Data.Linq.Table<clinicTbl> clinicTbls
		{
			get
			{
				return this.GetTable<clinicTbl>();
			}
		}
		
		public System.Data.Linq.Table<contentCommentTbl> contentCommentTbls
		{
			get
			{
				return this.GetTable<contentCommentTbl>();
			}
		}
		
		public System.Data.Linq.Table<contentDetailTbl> contentDetailTbls
		{
			get
			{
				return this.GetTable<contentDetailTbl>();
			}
		}
		
		public System.Data.Linq.Table<contentGroupTbl> contentGroupTbls
		{
			get
			{
				return this.GetTable<contentGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<contentLikeTbl> contentLikeTbls
		{
			get
			{
				return this.GetTable<contentLikeTbl>();
			}
		}
		
		public System.Data.Linq.Table<contentSubGroupTbl> contentSubGroupTbls
		{
			get
			{
				return this.GetTable<contentSubGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<contentTbl> contentTbls
		{
			get
			{
				return this.GetTable<contentTbl>();
			}
		}
		
		public System.Data.Linq.Table<doctor_product_productGroupTbl> doctor_product_productGroupTbls
		{
			get
			{
				return this.GetTable<doctor_product_productGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<doctor_productTbl> doctor_productTbls
		{
			get
			{
				return this.GetTable<doctor_productTbl>();
			}
		}
		
		public System.Data.Linq.Table<doctor_serviceTbl> doctor_serviceTbls
		{
			get
			{
				return this.GetTable<doctor_serviceTbl>();
			}
		}
		
		public System.Data.Linq.Table<doctorTbl> doctorTbls
		{
			get
			{
				return this.GetTable<doctorTbl>();
			}
		}
		
		public System.Data.Linq.Table<documentTbl> documentTbls
		{
			get
			{
				return this.GetTable<documentTbl>();
			}
		}
		
		public System.Data.Linq.Table<documentTypeTbl> documentTypeTbls
		{
			get
			{
				return this.GetTable<documentTypeTbl>();
			}
		}
		
		public System.Data.Linq.Table<educationTbl> educationTbls
		{
			get
			{
				return this.GetTable<educationTbl>();
			}
		}
		
		public System.Data.Linq.Table<equipment_product_productGroupTbl> equipment_product_productGroupTbls
		{
			get
			{
				return this.GetTable<equipment_product_productGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<equipment_productTbl> equipment_productTbls
		{
			get
			{
				return this.GetTable<equipment_productTbl>();
			}
		}
		
		public System.Data.Linq.Table<equipment_serviceTbl> equipment_serviceTbls
		{
			get
			{
				return this.GetTable<equipment_serviceTbl>();
			}
		}
		
		public System.Data.Linq.Table<equipmentTbl> equipmentTbls
		{
			get
			{
				return this.GetTable<equipmentTbl>();
			}
		}
		
		public System.Data.Linq.Table<guarantyTypeTbl> guarantyTypeTbls
		{
			get
			{
				return this.GetTable<guarantyTypeTbl>();
			}
		}
		
		public System.Data.Linq.Table<insuranceTbl> insuranceTbls
		{
			get
			{
				return this.GetTable<insuranceTbl>();
			}
		}
		
		public System.Data.Linq.Table<message_userGroupTbl> message_userGroupTbls
		{
			get
			{
				return this.GetTable<message_userGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<message_userTbl> message_userTbls
		{
			get
			{
				return this.GetTable<message_userTbl>();
			}
		}
		
		public System.Data.Linq.Table<messageTbl> messageTbls
		{
			get
			{
				return this.GetTable<messageTbl>();
			}
		}
		
		public System.Data.Linq.Table<ngo_product_productGroupTbl> ngo_product_productGroupTbls
		{
			get
			{
				return this.GetTable<ngo_product_productGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<ngo_productTbl> ngo_productTbls
		{
			get
			{
				return this.GetTable<ngo_productTbl>();
			}
		}
		
		public System.Data.Linq.Table<ngo_serviceTbl> ngo_serviceTbls
		{
			get
			{
				return this.GetTable<ngo_serviceTbl>();
			}
		}
		
		public System.Data.Linq.Table<ngoTbl> ngoTbls
		{
			get
			{
				return this.GetTable<ngoTbl>();
			}
		}
		
		public System.Data.Linq.Table<orderTbl> orderTbls
		{
			get
			{
				return this.GetTable<orderTbl>();
			}
		}
		
		public System.Data.Linq.Table<packageTbl> packageTbls
		{
			get
			{
				return this.GetTable<packageTbl>();
			}
		}
		
		public System.Data.Linq.Table<patient_doctorTbl> patient_doctorTbls
		{
			get
			{
				return this.GetTable<patient_doctorTbl>();
			}
		}
		
		public System.Data.Linq.Table<patient_insuranceTbl> patient_insuranceTbls
		{
			get
			{
				return this.GetTable<patient_insuranceTbl>();
			}
		}
		
		public System.Data.Linq.Table<patientTbl> patientTbls
		{
			get
			{
				return this.GetTable<patientTbl>();
			}
		}
		
		public System.Data.Linq.Table<paymentTbl> paymentTbls
		{
			get
			{
				return this.GetTable<paymentTbl>();
			}
		}
		
		public System.Data.Linq.Table<permissionTbl> permissionTbls
		{
			get
			{
				return this.GetTable<permissionTbl>();
			}
		}
		
		public System.Data.Linq.Table<practitionTbl> practitionTbls
		{
			get
			{
				return this.GetTable<practitionTbl>();
			}
		}
		
		public System.Data.Linq.Table<productCategoryTbl> productCategoryTbls
		{
			get
			{
				return this.GetTable<productCategoryTbl>();
			}
		}
		
		public System.Data.Linq.Table<productGroupTbl> productGroupTbls
		{
			get
			{
				return this.GetTable<productGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<productTbl> productTbls
		{
			get
			{
				return this.GetTable<productTbl>();
			}
		}
		
		public System.Data.Linq.Table<provinceTbl> provinceTbls
		{
			get
			{
				return this.GetTable<provinceTbl>();
			}
		}
		
		public System.Data.Linq.Table<role_permissionTbl> role_permissionTbls
		{
			get
			{
				return this.GetTable<role_permissionTbl>();
			}
		}
		
		public System.Data.Linq.Table<roleTbl> roleTbls
		{
			get
			{
				return this.GetTable<roleTbl>();
			}
		}
		
		public System.Data.Linq.Table<serviceTbl> serviceTbls
		{
			get
			{
				return this.GetTable<serviceTbl>();
			}
		}
		
		public System.Data.Linq.Table<sessionTbl> sessionTbls
		{
			get
			{
				return this.GetTable<sessionTbl>();
			}
		}
		
		public System.Data.Linq.Table<settingTbl> settingTbls
		{
			get
			{
				return this.GetTable<settingTbl>();
			}
		}
		
		public System.Data.Linq.Table<tokenTbl> tokenTbls
		{
			get
			{
				return this.GetTable<tokenTbl>();
			}
		}
		
		public System.Data.Linq.Table<user_userGroupTbl> user_userGroupTbls
		{
			get
			{
				return this.GetTable<user_userGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<userGroupTbl> userGroupTbls
		{
			get
			{
				return this.GetTable<userGroupTbl>();
			}
		}
		
		public System.Data.Linq.Table<userTbl> userTbls
		{
			get
			{
				return this.GetTable<userTbl>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cityTbl")]
	public partial class cityTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private long _provinceId;
		
		private byte _status;
		
		private EntitySet<userTbl> _userTbls;
		
		private EntityRef<provinceTbl> _provinceTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnprovinceIdChanging(long value);
    partial void OnprovinceIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public cityTbl()
		{
			this._userTbls = new EntitySet<userTbl>(new Action<userTbl>(this.attach_userTbls), new Action<userTbl>(this.detach_userTbls));
			this._provinceTbl = default(EntityRef<provinceTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceId", DbType="BigInt NOT NULL")]
		public long provinceId
		{
			get
			{
				return this._provinceId;
			}
			set
			{
				if ((this._provinceId != value))
				{
					if (this._provinceTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprovinceIdChanging(value);
					this.SendPropertyChanging();
					this._provinceId = value;
					this.SendPropertyChanged("provinceId");
					this.OnprovinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cityTbl_userTbl", Storage="_userTbls", ThisKey="Id", OtherKey="cityId")]
		public EntitySet<userTbl> userTbls
		{
			get
			{
				return this._userTbls;
			}
			set
			{
				this._userTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="provinceTbl_cityTbl", Storage="_provinceTbl", ThisKey="provinceId", OtherKey="Id", IsForeignKey=true)]
		public provinceTbl provinceTbl
		{
			get
			{
				return this._provinceTbl.Entity;
			}
			set
			{
				provinceTbl previousValue = this._provinceTbl.Entity;
				if (((previousValue != value) 
							|| (this._provinceTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._provinceTbl.Entity = null;
						previousValue.cityTbls.Remove(this);
					}
					this._provinceTbl.Entity = value;
					if ((value != null))
					{
						value.cityTbls.Add(this);
						this._provinceId = value.Id;
					}
					else
					{
						this._provinceId = default(long);
					}
					this.SendPropertyChanged("provinceTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.cityTbl = this;
		}
		
		private void detach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.cityTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.walletTbl")]
	public partial class walletTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _userId;
		
		private double _price;
		
		private System.Nullable<long> _paymentId;
		
		private System.Nullable<long> _orderId;
		
		private System.Nullable<long> _toCustomer;
		
		private System.DateTime _registerDate;
		
		private EntityRef<orderTbl> _orderTbl;
		
		private EntityRef<paymentTbl> _paymentTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnpaymentIdChanging(System.Nullable<long> value);
    partial void OnpaymentIdChanged();
    partial void OnorderIdChanging(System.Nullable<long> value);
    partial void OnorderIdChanged();
    partial void OntoCustomerChanging(System.Nullable<long> value);
    partial void OntoCustomerChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public walletTbl()
		{
			this._orderTbl = default(EntityRef<orderTbl>);
			this._paymentTbl = default(EntityRef<paymentTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentId", DbType="BigInt")]
		public System.Nullable<long> paymentId
		{
			get
			{
				return this._paymentId;
			}
			set
			{
				if ((this._paymentId != value))
				{
					if (this._paymentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpaymentIdChanging(value);
					this.SendPropertyChanging();
					this._paymentId = value;
					this.SendPropertyChanged("paymentId");
					this.OnpaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="BigInt")]
		public System.Nullable<long> orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._orderTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toCustomer", DbType="BigInt")]
		public System.Nullable<long> toCustomer
		{
			get
			{
				return this._toCustomer;
			}
			set
			{
				if ((this._toCustomer != value))
				{
					this.OntoCustomerChanging(value);
					this.SendPropertyChanging();
					this._toCustomer = value;
					this.SendPropertyChanged("toCustomer");
					this.OntoCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="orderTbl_walletTbl", Storage="_orderTbl", ThisKey="orderId", OtherKey="Id", IsForeignKey=true)]
		public orderTbl orderTbl
		{
			get
			{
				return this._orderTbl.Entity;
			}
			set
			{
				orderTbl previousValue = this._orderTbl.Entity;
				if (((previousValue != value) 
							|| (this._orderTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._orderTbl.Entity = null;
						previousValue.walletTbls.Remove(this);
					}
					this._orderTbl.Entity = value;
					if ((value != null))
					{
						value.walletTbls.Add(this);
						this._orderId = value.Id;
					}
					else
					{
						this._orderId = default(Nullable<long>);
					}
					this.SendPropertyChanged("orderTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="paymentTbl_walletTbl", Storage="_paymentTbl", ThisKey="paymentId", OtherKey="Id", IsForeignKey=true)]
		public paymentTbl paymentTbl
		{
			get
			{
				return this._paymentTbl.Entity;
			}
			set
			{
				paymentTbl previousValue = this._paymentTbl.Entity;
				if (((previousValue != value) 
							|| (this._paymentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._paymentTbl.Entity = null;
						previousValue.walletTbls.Remove(this);
					}
					this._paymentTbl.Entity = value;
					if ((value != null))
					{
						value.walletTbls.Add(this);
						this._paymentId = value.Id;
					}
					else
					{
						this._paymentId = default(Nullable<long>);
					}
					this.SendPropertyChanged("paymentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_walletTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.walletTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.walletTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.class_userTbl")]
	public partial class class_userTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _userId;
		
		private long _classId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<classTbl> _classTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnclassIdChanging(long value);
    partial void OnclassIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public class_userTbl()
		{
			this._classTbl = default(EntityRef<classTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classId", DbType="BigInt NOT NULL")]
		public long classId
		{
			get
			{
				return this._classId;
			}
			set
			{
				if ((this._classId != value))
				{
					if (this._classTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIdChanging(value);
					this.SendPropertyChanging();
					this._classId = value;
					this.SendPropertyChanged("classId");
					this.OnclassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classTbl_class_userTbl", Storage="_classTbl", ThisKey="classId", OtherKey="Id", IsForeignKey=true)]
		public classTbl classTbl
		{
			get
			{
				return this._classTbl.Entity;
			}
			set
			{
				classTbl previousValue = this._classTbl.Entity;
				if (((previousValue != value) 
							|| (this._classTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classTbl.Entity = null;
						previousValue.class_userTbls.Remove(this);
					}
					this._classTbl.Entity = value;
					if ((value != null))
					{
						value.class_userTbls.Add(this);
						this._classId = value.Id;
					}
					else
					{
						this._classId = default(long);
					}
					this.SendPropertyChanged("classTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_class_userTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.class_userTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.class_userTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classDetailTbl")]
	public partial class classDetailTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _classId;
		
		private bool _type;
		
		private string _text;
		
		private string _fileType;
		
		private System.Data.Linq.Binary _value;
		
		private int _pri;
		
		private System.DateTime _registerDate;
		
		private long _registerUserId;
		
		private EntityRef<classTbl> _classTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnclassIdChanging(long value);
    partial void OnclassIdChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnvalueChanging(System.Data.Linq.Binary value);
    partial void OnvalueChanged();
    partial void OnpriChanging(int value);
    partial void OnpriChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    #endregion
		
		public classDetailTbl()
		{
			this._classTbl = default(EntityRef<classTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classId", DbType="BigInt NOT NULL")]
		public long classId
		{
			get
			{
				return this._classId;
			}
			set
			{
				if ((this._classId != value))
				{
					if (this._classTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIdChanging(value);
					this.SendPropertyChanging();
					this._classId = value;
					this.SendPropertyChanged("classId");
					this.OnclassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL")]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50)")]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="Int NOT NULL")]
		public int pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classTbl_classDetailTbl", Storage="_classTbl", ThisKey="classId", OtherKey="Id", IsForeignKey=true)]
		public classTbl classTbl
		{
			get
			{
				return this._classTbl.Entity;
			}
			set
			{
				classTbl previousValue = this._classTbl.Entity;
				if (((previousValue != value) 
							|| (this._classTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classTbl.Entity = null;
						previousValue.classDetailTbls.Remove(this);
					}
					this._classTbl.Entity = value;
					if ((value != null))
					{
						value.classDetailTbls.Add(this);
						this._classId = value.Id;
					}
					else
					{
						this._classId = default(long);
					}
					this.SendPropertyChanged("classTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_classDetailTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.classDetailTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.classDetailTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classGroupTbl")]
	public partial class classGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private EntitySet<classSubGroupTbl> _classSubGroupTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public classGroupTbl()
		{
			this._classSubGroupTbls = new EntitySet<classSubGroupTbl>(new Action<classSubGroupTbl>(this.attach_classSubGroupTbls), new Action<classSubGroupTbl>(this.detach_classSubGroupTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classGroupTbl_classSubGroupTbl", Storage="_classSubGroupTbls", ThisKey="Id", OtherKey="classGroupId")]
		public EntitySet<classSubGroupTbl> classSubGroupTbls
		{
			get
			{
				return this._classSubGroupTbls;
			}
			set
			{
				this._classSubGroupTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_classSubGroupTbls(classSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.classGroupTbl = this;
		}
		
		private void detach_classSubGroupTbls(classSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.classGroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classSubGroupTbl")]
	public partial class classSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private long _classGroupId;
		
		private long _parentId;
		
		private byte _status;
		
		private EntitySet<classSubGroupTbl> _classSubGroupTbls;
		
		private EntitySet<classTbl> _classTbls;
		
		private EntityRef<classGroupTbl> _classGroupTbl;
		
		private EntityRef<classSubGroupTbl> _classSubGroupTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnclassGroupIdChanging(long value);
    partial void OnclassGroupIdChanged();
    partial void OnparentIdChanging(long value);
    partial void OnparentIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public classSubGroupTbl()
		{
			this._classSubGroupTbls = new EntitySet<classSubGroupTbl>(new Action<classSubGroupTbl>(this.attach_classSubGroupTbls), new Action<classSubGroupTbl>(this.detach_classSubGroupTbls));
			this._classTbls = new EntitySet<classTbl>(new Action<classTbl>(this.attach_classTbls), new Action<classTbl>(this.detach_classTbls));
			this._classGroupTbl = default(EntityRef<classGroupTbl>);
			this._classSubGroupTbl1 = default(EntityRef<classSubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classGroupId", DbType="BigInt NOT NULL")]
		public long classGroupId
		{
			get
			{
				return this._classGroupId;
			}
			set
			{
				if ((this._classGroupId != value))
				{
					if (this._classGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassGroupIdChanging(value);
					this.SendPropertyChanging();
					this._classGroupId = value;
					this.SendPropertyChanged("classGroupId");
					this.OnclassGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="BigInt NOT NULL")]
		public long parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					if (this._classSubGroupTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classSubGroupTbl_classSubGroupTbl", Storage="_classSubGroupTbls", ThisKey="Id", OtherKey="parentId")]
		public EntitySet<classSubGroupTbl> classSubGroupTbls
		{
			get
			{
				return this._classSubGroupTbls;
			}
			set
			{
				this._classSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classSubGroupTbl_classTbl", Storage="_classTbls", ThisKey="Id", OtherKey="classSubGroupId")]
		public EntitySet<classTbl> classTbls
		{
			get
			{
				return this._classTbls;
			}
			set
			{
				this._classTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classGroupTbl_classSubGroupTbl", Storage="_classGroupTbl", ThisKey="classGroupId", OtherKey="Id", IsForeignKey=true)]
		public classGroupTbl classGroupTbl
		{
			get
			{
				return this._classGroupTbl.Entity;
			}
			set
			{
				classGroupTbl previousValue = this._classGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._classGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classGroupTbl.Entity = null;
						previousValue.classSubGroupTbls.Remove(this);
					}
					this._classGroupTbl.Entity = value;
					if ((value != null))
					{
						value.classSubGroupTbls.Add(this);
						this._classGroupId = value.Id;
					}
					else
					{
						this._classGroupId = default(long);
					}
					this.SendPropertyChanged("classGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classSubGroupTbl_classSubGroupTbl", Storage="_classSubGroupTbl1", ThisKey="parentId", OtherKey="Id", IsForeignKey=true)]
		public classSubGroupTbl classSubGroupTbl1
		{
			get
			{
				return this._classSubGroupTbl1.Entity;
			}
			set
			{
				classSubGroupTbl previousValue = this._classSubGroupTbl1.Entity;
				if (((previousValue != value) 
							|| (this._classSubGroupTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classSubGroupTbl1.Entity = null;
						previousValue.classSubGroupTbls.Remove(this);
					}
					this._classSubGroupTbl1.Entity = value;
					if ((value != null))
					{
						value.classSubGroupTbls.Add(this);
						this._parentId = value.Id;
					}
					else
					{
						this._parentId = default(long);
					}
					this.SendPropertyChanged("classSubGroupTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_classSubGroupTbls(classSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.classSubGroupTbl1 = this;
		}
		
		private void detach_classSubGroupTbls(classSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.classSubGroupTbl1 = null;
		}
		
		private void attach_classTbls(classTbl entity)
		{
			this.SendPropertyChanging();
			entity.classSubGroupTbl = this;
		}
		
		private void detach_classTbls(classTbl entity)
		{
			this.SendPropertyChanging();
			entity.classSubGroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.classTbl")]
	public partial class classTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private string _teacherName;
		
		private double _price;
		
		private int _sessionCount;
		
		private string _address;
		
		private double _latitude;
		
		private double _longitude;
		
		private long _cityId;
		
		private string _phone;
		
		private long _classSubGroupId;
		
		private byte _status;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntitySet<class_userTbl> _class_userTbls;
		
		private EntitySet<classDetailTbl> _classDetailTbls;
		
		private EntitySet<sessionTbl> _sessionTbls;
		
		private EntityRef<classSubGroupTbl> _classSubGroupTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnteacherNameChanging(string value);
    partial void OnteacherNameChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnsessionCountChanging(int value);
    partial void OnsessionCountChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    partial void OncityIdChanging(long value);
    partial void OncityIdChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnclassSubGroupIdChanging(long value);
    partial void OnclassSubGroupIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public classTbl()
		{
			this._class_userTbls = new EntitySet<class_userTbl>(new Action<class_userTbl>(this.attach_class_userTbls), new Action<class_userTbl>(this.detach_class_userTbls));
			this._classDetailTbls = new EntitySet<classDetailTbl>(new Action<classDetailTbl>(this.attach_classDetailTbls), new Action<classDetailTbl>(this.detach_classDetailTbls));
			this._sessionTbls = new EntitySet<sessionTbl>(new Action<sessionTbl>(this.attach_sessionTbls), new Action<sessionTbl>(this.detach_sessionTbls));
			this._classSubGroupTbl = default(EntityRef<classSubGroupTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string teacherName
		{
			get
			{
				return this._teacherName;
			}
			set
			{
				if ((this._teacherName != value))
				{
					this.OnteacherNameChanging(value);
					this.SendPropertyChanging();
					this._teacherName = value;
					this.SendPropertyChanged("teacherName");
					this.OnteacherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionCount", DbType="Int NOT NULL")]
		public int sessionCount
		{
			get
			{
				return this._sessionCount;
			}
			set
			{
				if ((this._sessionCount != value))
				{
					this.OnsessionCountChanging(value);
					this.SendPropertyChanging();
					this._sessionCount = value;
					this.SendPropertyChanged("sessionCount");
					this.OnsessionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityId", DbType="BigInt NOT NULL")]
		public long cityId
		{
			get
			{
				return this._cityId;
			}
			set
			{
				if ((this._cityId != value))
				{
					this.OncityIdChanging(value);
					this.SendPropertyChanging();
					this._cityId = value;
					this.SendPropertyChanged("cityId");
					this.OncityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classSubGroupId", DbType="BigInt NOT NULL")]
		public long classSubGroupId
		{
			get
			{
				return this._classSubGroupId;
			}
			set
			{
				if ((this._classSubGroupId != value))
				{
					if (this._classSubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassSubGroupIdChanging(value);
					this.SendPropertyChanging();
					this._classSubGroupId = value;
					this.SendPropertyChanged("classSubGroupId");
					this.OnclassSubGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classTbl_class_userTbl", Storage="_class_userTbls", ThisKey="Id", OtherKey="classId")]
		public EntitySet<class_userTbl> class_userTbls
		{
			get
			{
				return this._class_userTbls;
			}
			set
			{
				this._class_userTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classTbl_classDetailTbl", Storage="_classDetailTbls", ThisKey="Id", OtherKey="classId")]
		public EntitySet<classDetailTbl> classDetailTbls
		{
			get
			{
				return this._classDetailTbls;
			}
			set
			{
				this._classDetailTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classTbl_sessionTbl", Storage="_sessionTbls", ThisKey="Id", OtherKey="classId")]
		public EntitySet<sessionTbl> sessionTbls
		{
			get
			{
				return this._sessionTbls;
			}
			set
			{
				this._sessionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classSubGroupTbl_classTbl", Storage="_classSubGroupTbl", ThisKey="classSubGroupId", OtherKey="Id", IsForeignKey=true)]
		public classSubGroupTbl classSubGroupTbl
		{
			get
			{
				return this._classSubGroupTbl.Entity;
			}
			set
			{
				classSubGroupTbl previousValue = this._classSubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._classSubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classSubGroupTbl.Entity = null;
						previousValue.classTbls.Remove(this);
					}
					this._classSubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.classTbls.Add(this);
						this._classSubGroupId = value.Id;
					}
					else
					{
						this._classSubGroupId = default(long);
					}
					this.SendPropertyChanged("classSubGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_classTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.classTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.classTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_class_userTbls(class_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.classTbl = this;
		}
		
		private void detach_class_userTbls(class_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.classTbl = null;
		}
		
		private void attach_classDetailTbls(classDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.classTbl = this;
		}
		
		private void detach_classDetailTbls(classDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.classTbl = null;
		}
		
		private void attach_sessionTbls(sessionTbl entity)
		{
			this.SendPropertyChanging();
			entity.classTbl = this;
		}
		
		private void detach_sessionTbls(sessionTbl entity)
		{
			this.SendPropertyChanging();
			entity.classTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.clinic_practitionTbl")]
	public partial class clinic_practitionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _clinicId;
		
		private long _practitionId;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntityRef<clinicTbl> _clinicTbl;
		
		private EntityRef<practitionTbl> _practitionTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnclinicIdChanging(long value);
    partial void OnclinicIdChanged();
    partial void OnpractitionIdChanging(long value);
    partial void OnpractitionIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public clinic_practitionTbl()
		{
			this._clinicTbl = default(EntityRef<clinicTbl>);
			this._practitionTbl = default(EntityRef<practitionTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clinicId", DbType="BigInt NOT NULL")]
		public long clinicId
		{
			get
			{
				return this._clinicId;
			}
			set
			{
				if ((this._clinicId != value))
				{
					if (this._clinicTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclinicIdChanging(value);
					this.SendPropertyChanging();
					this._clinicId = value;
					this.SendPropertyChanged("clinicId");
					this.OnclinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practitionId", DbType="BigInt NOT NULL")]
		public long practitionId
		{
			get
			{
				return this._practitionId;
			}
			set
			{
				if ((this._practitionId != value))
				{
					if (this._practitionTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpractitionIdChanging(value);
					this.SendPropertyChanging();
					this._practitionId = value;
					this.SendPropertyChanged("practitionId");
					this.OnpractitionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_practitionTbl", Storage="_clinicTbl", ThisKey="clinicId", OtherKey="Id", IsForeignKey=true)]
		public clinicTbl clinicTbl
		{
			get
			{
				return this._clinicTbl.Entity;
			}
			set
			{
				clinicTbl previousValue = this._clinicTbl.Entity;
				if (((previousValue != value) 
							|| (this._clinicTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._clinicTbl.Entity = null;
						previousValue.clinic_practitionTbls.Remove(this);
					}
					this._clinicTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_practitionTbls.Add(this);
						this._clinicId = value.Id;
					}
					else
					{
						this._clinicId = default(long);
					}
					this.SendPropertyChanged("clinicTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="practitionTbl_clinic_practitionTbl", Storage="_practitionTbl", ThisKey="practitionId", OtherKey="Id", IsForeignKey=true)]
		public practitionTbl practitionTbl
		{
			get
			{
				return this._practitionTbl.Entity;
			}
			set
			{
				practitionTbl previousValue = this._practitionTbl.Entity;
				if (((previousValue != value) 
							|| (this._practitionTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._practitionTbl.Entity = null;
						previousValue.clinic_practitionTbls.Remove(this);
					}
					this._practitionTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_practitionTbls.Add(this);
						this._practitionId = value.Id;
					}
					else
					{
						this._practitionId = default(long);
					}
					this.SendPropertyChanged("practitionTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.clinic_product_productGroupTbl")]
	public partial class clinic_product_productGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _clinicId;
		
		private System.Nullable<long> _productGroupId;
		
		private System.Nullable<long> _productId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<clinicTbl> _clinicTbl;
		
		private EntityRef<productGroupTbl> _productGroupTbl;
		
		private EntityRef<productTbl> _productTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnclinicIdChanging(long value);
    partial void OnclinicIdChanged();
    partial void OnproductGroupIdChanging(System.Nullable<long> value);
    partial void OnproductGroupIdChanged();
    partial void OnproductIdChanging(System.Nullable<long> value);
    partial void OnproductIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public clinic_product_productGroupTbl()
		{
			this._clinicTbl = default(EntityRef<clinicTbl>);
			this._productGroupTbl = default(EntityRef<productGroupTbl>);
			this._productTbl = default(EntityRef<productTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clinicId", DbType="BigInt NOT NULL")]
		public long clinicId
		{
			get
			{
				return this._clinicId;
			}
			set
			{
				if ((this._clinicId != value))
				{
					if (this._clinicTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclinicIdChanging(value);
					this.SendPropertyChanging();
					this._clinicId = value;
					this.SendPropertyChanged("clinicId");
					this.OnclinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productGroupId", DbType="BigInt")]
		public System.Nullable<long> productGroupId
		{
			get
			{
				return this._productGroupId;
			}
			set
			{
				if ((this._productGroupId != value))
				{
					if (this._productGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductGroupIdChanging(value);
					this.SendPropertyChanging();
					this._productGroupId = value;
					this.SendPropertyChanged("productGroupId");
					this.OnproductGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productId", DbType="BigInt")]
		public System.Nullable<long> productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					if (this._productTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIdChanging(value);
					this.SendPropertyChanging();
					this._productId = value;
					this.SendPropertyChanged("productId");
					this.OnproductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_product_productGroupTbl", Storage="_clinicTbl", ThisKey="clinicId", OtherKey="Id", IsForeignKey=true)]
		public clinicTbl clinicTbl
		{
			get
			{
				return this._clinicTbl.Entity;
			}
			set
			{
				clinicTbl previousValue = this._clinicTbl.Entity;
				if (((previousValue != value) 
							|| (this._clinicTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._clinicTbl.Entity = null;
						previousValue.clinic_product_productGroupTbls.Remove(this);
					}
					this._clinicTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_product_productGroupTbls.Add(this);
						this._clinicId = value.Id;
					}
					else
					{
						this._clinicId = default(long);
					}
					this.SendPropertyChanged("clinicTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_clinic_product_productGroupTbl", Storage="_productGroupTbl", ThisKey="productGroupId", OtherKey="Id", IsForeignKey=true)]
		public productGroupTbl productGroupTbl
		{
			get
			{
				return this._productGroupTbl.Entity;
			}
			set
			{
				productGroupTbl previousValue = this._productGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._productGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productGroupTbl.Entity = null;
						previousValue.clinic_product_productGroupTbls.Remove(this);
					}
					this._productGroupTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_product_productGroupTbls.Add(this);
						this._productGroupId = value.Id;
					}
					else
					{
						this._productGroupId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_clinic_product_productGroupTbl", Storage="_productTbl", ThisKey="productId", OtherKey="Id", IsForeignKey=true)]
		public productTbl productTbl
		{
			get
			{
				return this._productTbl.Entity;
			}
			set
			{
				productTbl previousValue = this._productTbl.Entity;
				if (((previousValue != value) 
							|| (this._productTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productTbl.Entity = null;
						previousValue.clinic_product_productGroupTbls.Remove(this);
					}
					this._productTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_product_productGroupTbls.Add(this);
						this._productId = value.Id;
					}
					else
					{
						this._productId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.clinic_productTbl")]
	public partial class clinic_productTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _clinicId;
		
		private long _productCategoryId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<clinicTbl> _clinicTbl;
		
		private EntityRef<productCategoryTbl> _productCategoryTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnclinicIdChanging(long value);
    partial void OnclinicIdChanged();
    partial void OnproductCategoryIdChanging(long value);
    partial void OnproductCategoryIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public clinic_productTbl()
		{
			this._clinicTbl = default(EntityRef<clinicTbl>);
			this._productCategoryTbl = default(EntityRef<productCategoryTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clinicId", DbType="BigInt NOT NULL")]
		public long clinicId
		{
			get
			{
				return this._clinicId;
			}
			set
			{
				if ((this._clinicId != value))
				{
					if (this._clinicTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclinicIdChanging(value);
					this.SendPropertyChanging();
					this._clinicId = value;
					this.SendPropertyChanged("clinicId");
					this.OnclinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCategoryId", DbType="BigInt NOT NULL")]
		public long productCategoryId
		{
			get
			{
				return this._productCategoryId;
			}
			set
			{
				if ((this._productCategoryId != value))
				{
					if (this._productCategoryTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._productCategoryId = value;
					this.SendPropertyChanged("productCategoryId");
					this.OnproductCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_productTbl", Storage="_clinicTbl", ThisKey="clinicId", OtherKey="Id", IsForeignKey=true)]
		public clinicTbl clinicTbl
		{
			get
			{
				return this._clinicTbl.Entity;
			}
			set
			{
				clinicTbl previousValue = this._clinicTbl.Entity;
				if (((previousValue != value) 
							|| (this._clinicTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._clinicTbl.Entity = null;
						previousValue.clinic_productTbls.Remove(this);
					}
					this._clinicTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_productTbls.Add(this);
						this._clinicId = value.Id;
					}
					else
					{
						this._clinicId = default(long);
					}
					this.SendPropertyChanged("clinicTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_clinic_productTbl", Storage="_productCategoryTbl", ThisKey="productCategoryId", OtherKey="Id", IsForeignKey=true)]
		public productCategoryTbl productCategoryTbl
		{
			get
			{
				return this._productCategoryTbl.Entity;
			}
			set
			{
				productCategoryTbl previousValue = this._productCategoryTbl.Entity;
				if (((previousValue != value) 
							|| (this._productCategoryTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productCategoryTbl.Entity = null;
						previousValue.clinic_productTbls.Remove(this);
					}
					this._productCategoryTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_productTbls.Add(this);
						this._productCategoryId = value.Id;
					}
					else
					{
						this._productCategoryId = default(long);
					}
					this.SendPropertyChanged("productCategoryTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.clinic_serviceTbl")]
	public partial class clinic_serviceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _clinicId;
		
		private long _serviceId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<clinicTbl> _clinicTbl;
		
		private EntityRef<serviceTbl> _serviceTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnclinicIdChanging(long value);
    partial void OnclinicIdChanged();
    partial void OnserviceIdChanging(long value);
    partial void OnserviceIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public clinic_serviceTbl()
		{
			this._clinicTbl = default(EntityRef<clinicTbl>);
			this._serviceTbl = default(EntityRef<serviceTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clinicId", DbType="BigInt NOT NULL")]
		public long clinicId
		{
			get
			{
				return this._clinicId;
			}
			set
			{
				if ((this._clinicId != value))
				{
					if (this._clinicTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclinicIdChanging(value);
					this.SendPropertyChanging();
					this._clinicId = value;
					this.SendPropertyChanged("clinicId");
					this.OnclinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceId", DbType="BigInt NOT NULL")]
		public long serviceId
		{
			get
			{
				return this._serviceId;
			}
			set
			{
				if ((this._serviceId != value))
				{
					if (this._serviceTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceIdChanging(value);
					this.SendPropertyChanging();
					this._serviceId = value;
					this.SendPropertyChanged("serviceId");
					this.OnserviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_serviceTbl", Storage="_clinicTbl", ThisKey="clinicId", OtherKey="Id", IsForeignKey=true)]
		public clinicTbl clinicTbl
		{
			get
			{
				return this._clinicTbl.Entity;
			}
			set
			{
				clinicTbl previousValue = this._clinicTbl.Entity;
				if (((previousValue != value) 
							|| (this._clinicTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._clinicTbl.Entity = null;
						previousValue.clinic_serviceTbls.Remove(this);
					}
					this._clinicTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_serviceTbls.Add(this);
						this._clinicId = value.Id;
					}
					else
					{
						this._clinicId = default(long);
					}
					this.SendPropertyChanged("clinicTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_clinic_serviceTbl", Storage="_serviceTbl", ThisKey="serviceId", OtherKey="Id", IsForeignKey=true)]
		public serviceTbl serviceTbl
		{
			get
			{
				return this._serviceTbl.Entity;
			}
			set
			{
				serviceTbl previousValue = this._serviceTbl.Entity;
				if (((previousValue != value) 
							|| (this._serviceTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceTbl.Entity = null;
						previousValue.clinic_serviceTbls.Remove(this);
					}
					this._serviceTbl.Entity = value;
					if ((value != null))
					{
						value.clinic_serviceTbls.Add(this);
						this._serviceId = value.Id;
					}
					else
					{
						this._serviceId = default(long);
					}
					this.SendPropertyChanged("serviceTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.clinicTbl")]
	public partial class clinicTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _licenceNumber;
		
		private string _phone;
		
		private string _fax;
		
		private bool _isAdvisable;
		
		private System.Data.Linq.Binary _imgSignature;
		
		private string _imgSignatureFileType;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<clinic_practitionTbl> _clinic_practitionTbls;
		
		private EntitySet<clinic_product_productGroupTbl> _clinic_product_productGroupTbls;
		
		private EntitySet<clinic_productTbl> _clinic_productTbls;
		
		private EntitySet<clinic_serviceTbl> _clinic_serviceTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlicenceNumberChanging(string value);
    partial void OnlicenceNumberChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void OnisAdvisableChanging(bool value);
    partial void OnisAdvisableChanged();
    partial void OnimgSignatureChanging(System.Data.Linq.Binary value);
    partial void OnimgSignatureChanged();
    partial void OnimgSignatureFileTypeChanging(string value);
    partial void OnimgSignatureFileTypeChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public clinicTbl()
		{
			this._clinic_practitionTbls = new EntitySet<clinic_practitionTbl>(new Action<clinic_practitionTbl>(this.attach_clinic_practitionTbls), new Action<clinic_practitionTbl>(this.detach_clinic_practitionTbls));
			this._clinic_product_productGroupTbls = new EntitySet<clinic_product_productGroupTbl>(new Action<clinic_product_productGroupTbl>(this.attach_clinic_product_productGroupTbls), new Action<clinic_product_productGroupTbl>(this.detach_clinic_product_productGroupTbls));
			this._clinic_productTbls = new EntitySet<clinic_productTbl>(new Action<clinic_productTbl>(this.attach_clinic_productTbls), new Action<clinic_productTbl>(this.detach_clinic_productTbls));
			this._clinic_serviceTbls = new EntitySet<clinic_serviceTbl>(new Action<clinic_serviceTbl>(this.attach_clinic_serviceTbls), new Action<clinic_serviceTbl>(this.detach_clinic_serviceTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_licenceNumber", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string licenceNumber
		{
			get
			{
				return this._licenceNumber;
			}
			set
			{
				if ((this._licenceNumber != value))
				{
					this.OnlicenceNumberChanging(value);
					this.SendPropertyChanging();
					this._licenceNumber = value;
					this.SendPropertyChanged("licenceNumber");
					this.OnlicenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdvisable", DbType="Bit NOT NULL")]
		public bool isAdvisable
		{
			get
			{
				return this._isAdvisable;
			}
			set
			{
				if ((this._isAdvisable != value))
				{
					this.OnisAdvisableChanging(value);
					this.SendPropertyChanging();
					this._isAdvisable = value;
					this.SendPropertyChanged("isAdvisable");
					this.OnisAdvisableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgSignature", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imgSignature
		{
			get
			{
				return this._imgSignature;
			}
			set
			{
				if ((this._imgSignature != value))
				{
					this.OnimgSignatureChanging(value);
					this.SendPropertyChanging();
					this._imgSignature = value;
					this.SendPropertyChanged("imgSignature");
					this.OnimgSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgSignatureFileType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imgSignatureFileType
		{
			get
			{
				return this._imgSignatureFileType;
			}
			set
			{
				if ((this._imgSignatureFileType != value))
				{
					this.OnimgSignatureFileTypeChanging(value);
					this.SendPropertyChanging();
					this._imgSignatureFileType = value;
					this.SendPropertyChanged("imgSignatureFileType");
					this.OnimgSignatureFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_practitionTbl", Storage="_clinic_practitionTbls", ThisKey="Id", OtherKey="clinicId")]
		public EntitySet<clinic_practitionTbl> clinic_practitionTbls
		{
			get
			{
				return this._clinic_practitionTbls;
			}
			set
			{
				this._clinic_practitionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_product_productGroupTbl", Storage="_clinic_product_productGroupTbls", ThisKey="Id", OtherKey="clinicId")]
		public EntitySet<clinic_product_productGroupTbl> clinic_product_productGroupTbls
		{
			get
			{
				return this._clinic_product_productGroupTbls;
			}
			set
			{
				this._clinic_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_productTbl", Storage="_clinic_productTbls", ThisKey="Id", OtherKey="clinicId")]
		public EntitySet<clinic_productTbl> clinic_productTbls
		{
			get
			{
				return this._clinic_productTbls;
			}
			set
			{
				this._clinic_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clinicTbl_clinic_serviceTbl", Storage="_clinic_serviceTbls", ThisKey="Id", OtherKey="clinicId")]
		public EntitySet<clinic_serviceTbl> clinic_serviceTbls
		{
			get
			{
				return this._clinic_serviceTbls;
			}
			set
			{
				this._clinic_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_clinicTbl", Storage="_userTbl", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.clinicTbl = null;
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.clinicTbl = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clinic_practitionTbls(clinic_practitionTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = this;
		}
		
		private void detach_clinic_practitionTbls(clinic_practitionTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = null;
		}
		
		private void attach_clinic_product_productGroupTbls(clinic_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = this;
		}
		
		private void detach_clinic_product_productGroupTbls(clinic_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = null;
		}
		
		private void attach_clinic_productTbls(clinic_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = this;
		}
		
		private void detach_clinic_productTbls(clinic_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = null;
		}
		
		private void attach_clinic_serviceTbls(clinic_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = this;
		}
		
		private void detach_clinic_serviceTbls(clinic_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.clinicTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contentCommentTbl")]
	public partial class contentCommentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _contentId;
		
		private string _fullName;
		
		private string _mobile;
		
		private string _email;
		
		private string _text;
		
		private long _confirmUserId;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntityRef<contentTbl> _contentTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OncontentIdChanging(long value);
    partial void OncontentIdChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnconfirmUserIdChanging(long value);
    partial void OnconfirmUserIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public contentCommentTbl()
		{
			this._contentTbl = default(EntityRef<contentTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentId", DbType="BigInt NOT NULL")]
		public long contentId
		{
			get
			{
				return this._contentId;
			}
			set
			{
				if ((this._contentId != value))
				{
					if (this._contentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIdChanging(value);
					this.SendPropertyChanging();
					this._contentId = value;
					this.SendPropertyChanged("contentId");
					this.OncontentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmUserId", DbType="BigInt NOT NULL")]
		public long confirmUserId
		{
			get
			{
				return this._confirmUserId;
			}
			set
			{
				if ((this._confirmUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnconfirmUserIdChanging(value);
					this.SendPropertyChanging();
					this._confirmUserId = value;
					this.SendPropertyChanged("confirmUserId");
					this.OnconfirmUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentTbl_contentCommentTbl", Storage="_contentTbl", ThisKey="contentId", OtherKey="Id", IsForeignKey=true)]
		public contentTbl contentTbl
		{
			get
			{
				return this._contentTbl.Entity;
			}
			set
			{
				contentTbl previousValue = this._contentTbl.Entity;
				if (((previousValue != value) 
							|| (this._contentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._contentTbl.Entity = null;
						previousValue.contentCommentTbls.Remove(this);
					}
					this._contentTbl.Entity = value;
					if ((value != null))
					{
						value.contentCommentTbls.Add(this);
						this._contentId = value.Id;
					}
					else
					{
						this._contentId = default(long);
					}
					this.SendPropertyChanged("contentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentCommentTbl", Storage="_userTbl", ThisKey="confirmUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.contentCommentTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.contentCommentTbls.Add(this);
						this._confirmUserId = value.Id;
					}
					else
					{
						this._confirmUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contentDetailTbl")]
	public partial class contentDetailTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _contentId;
		
		private bool _type;
		
		private string _text;
		
		private string _fileType;
		
		private System.Data.Linq.Binary _value;
		
		private int _pri;
		
		private byte _status;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<contentTbl> _contentTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OncontentIdChanging(long value);
    partial void OncontentIdChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnvalueChanging(System.Data.Linq.Binary value);
    partial void OnvalueChanged();
    partial void OnpriChanging(int value);
    partial void OnpriChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public contentDetailTbl()
		{
			this._contentTbl = default(EntityRef<contentTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentId", DbType="BigInt NOT NULL")]
		public long contentId
		{
			get
			{
				return this._contentId;
			}
			set
			{
				if ((this._contentId != value))
				{
					if (this._contentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIdChanging(value);
					this.SendPropertyChanging();
					this._contentId = value;
					this.SendPropertyChanged("contentId");
					this.OncontentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL")]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50)")]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pri", DbType="Int NOT NULL")]
		public int pri
		{
			get
			{
				return this._pri;
			}
			set
			{
				if ((this._pri != value))
				{
					this.OnpriChanging(value);
					this.SendPropertyChanging();
					this._pri = value;
					this.SendPropertyChanged("pri");
					this.OnpriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentTbl_contentDetailTbl", Storage="_contentTbl", ThisKey="contentId", OtherKey="Id", IsForeignKey=true)]
		public contentTbl contentTbl
		{
			get
			{
				return this._contentTbl.Entity;
			}
			set
			{
				contentTbl previousValue = this._contentTbl.Entity;
				if (((previousValue != value) 
							|| (this._contentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._contentTbl.Entity = null;
						previousValue.contentDetailTbls.Remove(this);
					}
					this._contentTbl.Entity = value;
					if ((value != null))
					{
						value.contentDetailTbls.Add(this);
						this._contentId = value.Id;
					}
					else
					{
						this._contentId = default(long);
					}
					this.SendPropertyChanged("contentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentDetailTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.contentDetailTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.contentDetailTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contentGroupTbl")]
	public partial class contentGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private EntitySet<contentSubGroupTbl> _contentSubGroupTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public contentGroupTbl()
		{
			this._contentSubGroupTbls = new EntitySet<contentSubGroupTbl>(new Action<contentSubGroupTbl>(this.attach_contentSubGroupTbls), new Action<contentSubGroupTbl>(this.detach_contentSubGroupTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentGroupTbl_contentSubGroupTbl", Storage="_contentSubGroupTbls", ThisKey="Id", OtherKey="contentGroupId")]
		public EntitySet<contentSubGroupTbl> contentSubGroupTbls
		{
			get
			{
				return this._contentSubGroupTbls;
			}
			set
			{
				this._contentSubGroupTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_contentSubGroupTbls(contentSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentGroupTbl = this;
		}
		
		private void detach_contentSubGroupTbls(contentSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentGroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contentLikeTbl")]
	public partial class contentLikeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _contentId;
		
		private long _UserId;
		
		private bool _isLike;
		
		private System.DateTime _registerDate;
		
		private EntityRef<contentTbl> _contentTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OncontentIdChanging(long value);
    partial void OncontentIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnisLikeChanging(bool value);
    partial void OnisLikeChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public contentLikeTbl()
		{
			this._contentTbl = default(EntityRef<contentTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentId", DbType="BigInt NOT NULL")]
		public long contentId
		{
			get
			{
				return this._contentId;
			}
			set
			{
				if ((this._contentId != value))
				{
					if (this._contentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIdChanging(value);
					this.SendPropertyChanging();
					this._contentId = value;
					this.SendPropertyChanged("contentId");
					this.OncontentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLike", DbType="Bit NOT NULL")]
		public bool isLike
		{
			get
			{
				return this._isLike;
			}
			set
			{
				if ((this._isLike != value))
				{
					this.OnisLikeChanging(value);
					this.SendPropertyChanging();
					this._isLike = value;
					this.SendPropertyChanged("isLike");
					this.OnisLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentTbl_contentLikeTbl", Storage="_contentTbl", ThisKey="contentId", OtherKey="Id", IsForeignKey=true)]
		public contentTbl contentTbl
		{
			get
			{
				return this._contentTbl.Entity;
			}
			set
			{
				contentTbl previousValue = this._contentTbl.Entity;
				if (((previousValue != value) 
							|| (this._contentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._contentTbl.Entity = null;
						previousValue.contentLikeTbls.Remove(this);
					}
					this._contentTbl.Entity = value;
					if ((value != null))
					{
						value.contentLikeTbls.Add(this);
						this._contentId = value.Id;
					}
					else
					{
						this._contentId = default(long);
					}
					this.SendPropertyChanged("contentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentLikeTbl", Storage="_userTbl", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.contentLikeTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.contentLikeTbls.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contentSubGroupTbl")]
	public partial class contentSubGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private long _contentGroupId;
		
		private long _parentId;
		
		private byte _status;
		
		private EntitySet<contentSubGroupTbl> _contentSubGroupTbls;
		
		private EntitySet<contentTbl> _contentTbls;
		
		private EntityRef<contentGroupTbl> _contentGroupTbl;
		
		private EntityRef<contentSubGroupTbl> _contentSubGroupTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncontentGroupIdChanging(long value);
    partial void OncontentGroupIdChanged();
    partial void OnparentIdChanging(long value);
    partial void OnparentIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public contentSubGroupTbl()
		{
			this._contentSubGroupTbls = new EntitySet<contentSubGroupTbl>(new Action<contentSubGroupTbl>(this.attach_contentSubGroupTbls), new Action<contentSubGroupTbl>(this.detach_contentSubGroupTbls));
			this._contentTbls = new EntitySet<contentTbl>(new Action<contentTbl>(this.attach_contentTbls), new Action<contentTbl>(this.detach_contentTbls));
			this._contentGroupTbl = default(EntityRef<contentGroupTbl>);
			this._contentSubGroupTbl1 = default(EntityRef<contentSubGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentGroupId", DbType="BigInt NOT NULL")]
		public long contentGroupId
		{
			get
			{
				return this._contentGroupId;
			}
			set
			{
				if ((this._contentGroupId != value))
				{
					if (this._contentGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentGroupIdChanging(value);
					this.SendPropertyChanging();
					this._contentGroupId = value;
					this.SendPropertyChanged("contentGroupId");
					this.OncontentGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="BigInt NOT NULL")]
		public long parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					if (this._contentSubGroupTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentSubGroupTbl_contentSubGroupTbl", Storage="_contentSubGroupTbls", ThisKey="Id", OtherKey="parentId")]
		public EntitySet<contentSubGroupTbl> contentSubGroupTbls
		{
			get
			{
				return this._contentSubGroupTbls;
			}
			set
			{
				this._contentSubGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentSubGroupTbl_contentTbl", Storage="_contentTbls", ThisKey="Id", OtherKey="contentSubGroupId")]
		public EntitySet<contentTbl> contentTbls
		{
			get
			{
				return this._contentTbls;
			}
			set
			{
				this._contentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentGroupTbl_contentSubGroupTbl", Storage="_contentGroupTbl", ThisKey="contentGroupId", OtherKey="Id", IsForeignKey=true)]
		public contentGroupTbl contentGroupTbl
		{
			get
			{
				return this._contentGroupTbl.Entity;
			}
			set
			{
				contentGroupTbl previousValue = this._contentGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._contentGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._contentGroupTbl.Entity = null;
						previousValue.contentSubGroupTbls.Remove(this);
					}
					this._contentGroupTbl.Entity = value;
					if ((value != null))
					{
						value.contentSubGroupTbls.Add(this);
						this._contentGroupId = value.Id;
					}
					else
					{
						this._contentGroupId = default(long);
					}
					this.SendPropertyChanged("contentGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentSubGroupTbl_contentSubGroupTbl", Storage="_contentSubGroupTbl1", ThisKey="parentId", OtherKey="Id", IsForeignKey=true)]
		public contentSubGroupTbl contentSubGroupTbl1
		{
			get
			{
				return this._contentSubGroupTbl1.Entity;
			}
			set
			{
				contentSubGroupTbl previousValue = this._contentSubGroupTbl1.Entity;
				if (((previousValue != value) 
							|| (this._contentSubGroupTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._contentSubGroupTbl1.Entity = null;
						previousValue.contentSubGroupTbls.Remove(this);
					}
					this._contentSubGroupTbl1.Entity = value;
					if ((value != null))
					{
						value.contentSubGroupTbls.Add(this);
						this._parentId = value.Id;
					}
					else
					{
						this._parentId = default(long);
					}
					this.SendPropertyChanged("contentSubGroupTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_contentSubGroupTbls(contentSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentSubGroupTbl1 = this;
		}
		
		private void detach_contentSubGroupTbls(contentSubGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentSubGroupTbl1 = null;
		}
		
		private void attach_contentTbls(contentTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentSubGroupTbl = this;
		}
		
		private void detach_contentTbls(contentTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentSubGroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contentTbl")]
	public partial class contentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _subject;
		
		private string _isPublish;
		
		private System.Nullable<long> _confirmUserId;
		
		private long _contentSubGroupId;
		
		private double _price;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private long _registerUserId;
		
		private EntitySet<contentCommentTbl> _contentCommentTbls;
		
		private EntitySet<contentDetailTbl> _contentDetailTbls;
		
		private EntitySet<contentLikeTbl> _contentLikeTbls;
		
		private EntityRef<contentSubGroupTbl> _contentSubGroupTbl;
		
		private EntityRef<userTbl> _userTbl;
		
		private EntityRef<userTbl> _userTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnisPublishChanging(string value);
    partial void OnisPublishChanged();
    partial void OnconfirmUserIdChanging(System.Nullable<long> value);
    partial void OnconfirmUserIdChanged();
    partial void OncontentSubGroupIdChanging(long value);
    partial void OncontentSubGroupIdChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    #endregion
		
		public contentTbl()
		{
			this._contentCommentTbls = new EntitySet<contentCommentTbl>(new Action<contentCommentTbl>(this.attach_contentCommentTbls), new Action<contentCommentTbl>(this.detach_contentCommentTbls));
			this._contentDetailTbls = new EntitySet<contentDetailTbl>(new Action<contentDetailTbl>(this.attach_contentDetailTbls), new Action<contentDetailTbl>(this.detach_contentDetailTbls));
			this._contentLikeTbls = new EntitySet<contentLikeTbl>(new Action<contentLikeTbl>(this.attach_contentLikeTbls), new Action<contentLikeTbl>(this.detach_contentLikeTbls));
			this._contentSubGroupTbl = default(EntityRef<contentSubGroupTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			this._userTbl1 = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublish", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string isPublish
		{
			get
			{
				return this._isPublish;
			}
			set
			{
				if ((this._isPublish != value))
				{
					this.OnisPublishChanging(value);
					this.SendPropertyChanging();
					this._isPublish = value;
					this.SendPropertyChanged("isPublish");
					this.OnisPublishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmUserId", DbType="BigInt")]
		public System.Nullable<long> confirmUserId
		{
			get
			{
				return this._confirmUserId;
			}
			set
			{
				if ((this._confirmUserId != value))
				{
					if (this._userTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnconfirmUserIdChanging(value);
					this.SendPropertyChanging();
					this._confirmUserId = value;
					this.SendPropertyChanged("confirmUserId");
					this.OnconfirmUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentSubGroupId", DbType="BigInt NOT NULL")]
		public long contentSubGroupId
		{
			get
			{
				return this._contentSubGroupId;
			}
			set
			{
				if ((this._contentSubGroupId != value))
				{
					if (this._contentSubGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentSubGroupIdChanging(value);
					this.SendPropertyChanging();
					this._contentSubGroupId = value;
					this.SendPropertyChanged("contentSubGroupId");
					this.OncontentSubGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentTbl_contentCommentTbl", Storage="_contentCommentTbls", ThisKey="Id", OtherKey="contentId")]
		public EntitySet<contentCommentTbl> contentCommentTbls
		{
			get
			{
				return this._contentCommentTbls;
			}
			set
			{
				this._contentCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentTbl_contentDetailTbl", Storage="_contentDetailTbls", ThisKey="Id", OtherKey="contentId")]
		public EntitySet<contentDetailTbl> contentDetailTbls
		{
			get
			{
				return this._contentDetailTbls;
			}
			set
			{
				this._contentDetailTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentTbl_contentLikeTbl", Storage="_contentLikeTbls", ThisKey="Id", OtherKey="contentId")]
		public EntitySet<contentLikeTbl> contentLikeTbls
		{
			get
			{
				return this._contentLikeTbls;
			}
			set
			{
				this._contentLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="contentSubGroupTbl_contentTbl", Storage="_contentSubGroupTbl", ThisKey="contentSubGroupId", OtherKey="Id", IsForeignKey=true)]
		public contentSubGroupTbl contentSubGroupTbl
		{
			get
			{
				return this._contentSubGroupTbl.Entity;
			}
			set
			{
				contentSubGroupTbl previousValue = this._contentSubGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._contentSubGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._contentSubGroupTbl.Entity = null;
						previousValue.contentTbls.Remove(this);
					}
					this._contentSubGroupTbl.Entity = value;
					if ((value != null))
					{
						value.contentTbls.Add(this);
						this._contentSubGroupId = value.Id;
					}
					else
					{
						this._contentSubGroupId = default(long);
					}
					this.SendPropertyChanged("contentSubGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.contentTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.contentTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentTbl1", Storage="_userTbl1", ThisKey="confirmUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl1
		{
			get
			{
				return this._userTbl1.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl1.Entity;
				if (((previousValue != value) 
							|| (this._userTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl1.Entity = null;
						previousValue.contentTbls1.Remove(this);
					}
					this._userTbl1.Entity = value;
					if ((value != null))
					{
						value.contentTbls1.Add(this);
						this._confirmUserId = value.Id;
					}
					else
					{
						this._confirmUserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("userTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_contentCommentTbls(contentCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentTbl = this;
		}
		
		private void detach_contentCommentTbls(contentCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentTbl = null;
		}
		
		private void attach_contentDetailTbls(contentDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentTbl = this;
		}
		
		private void detach_contentDetailTbls(contentDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentTbl = null;
		}
		
		private void attach_contentLikeTbls(contentLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentTbl = this;
		}
		
		private void detach_contentLikeTbls(contentLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.contentTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.doctor_product_productGroupTbl")]
	public partial class doctor_product_productGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _doctorId;
		
		private System.Nullable<long> _productGroupId;
		
		private System.Nullable<long> _productId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<doctorTbl> _doctorTbl;
		
		private EntityRef<productGroupTbl> _productGroupTbl;
		
		private EntityRef<productTbl> _productTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OnproductGroupIdChanging(System.Nullable<long> value);
    partial void OnproductGroupIdChanged();
    partial void OnproductIdChanging(System.Nullable<long> value);
    partial void OnproductIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public doctor_product_productGroupTbl()
		{
			this._doctorTbl = default(EntityRef<doctorTbl>);
			this._productGroupTbl = default(EntityRef<productGroupTbl>);
			this._productTbl = default(EntityRef<productTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._doctorTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productGroupId", DbType="BigInt")]
		public System.Nullable<long> productGroupId
		{
			get
			{
				return this._productGroupId;
			}
			set
			{
				if ((this._productGroupId != value))
				{
					if (this._productGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductGroupIdChanging(value);
					this.SendPropertyChanging();
					this._productGroupId = value;
					this.SendPropertyChanged("productGroupId");
					this.OnproductGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productId", DbType="BigInt")]
		public System.Nullable<long> productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					if (this._productTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIdChanging(value);
					this.SendPropertyChanging();
					this._productId = value;
					this.SendPropertyChanged("productId");
					this.OnproductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_doctor_product_productGroupTbl", Storage="_doctorTbl", ThisKey="doctorId", OtherKey="Id", IsForeignKey=true)]
		public doctorTbl doctorTbl
		{
			get
			{
				return this._doctorTbl.Entity;
			}
			set
			{
				doctorTbl previousValue = this._doctorTbl.Entity;
				if (((previousValue != value) 
							|| (this._doctorTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctorTbl.Entity = null;
						previousValue.doctor_product_productGroupTbls.Remove(this);
					}
					this._doctorTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_product_productGroupTbls.Add(this);
						this._doctorId = value.Id;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("doctorTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_doctor_product_productGroupTbl", Storage="_productGroupTbl", ThisKey="productGroupId", OtherKey="Id", IsForeignKey=true)]
		public productGroupTbl productGroupTbl
		{
			get
			{
				return this._productGroupTbl.Entity;
			}
			set
			{
				productGroupTbl previousValue = this._productGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._productGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productGroupTbl.Entity = null;
						previousValue.doctor_product_productGroupTbls.Remove(this);
					}
					this._productGroupTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_product_productGroupTbls.Add(this);
						this._productGroupId = value.Id;
					}
					else
					{
						this._productGroupId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_doctor_product_productGroupTbl", Storage="_productTbl", ThisKey="productId", OtherKey="Id", IsForeignKey=true)]
		public productTbl productTbl
		{
			get
			{
				return this._productTbl.Entity;
			}
			set
			{
				productTbl previousValue = this._productTbl.Entity;
				if (((previousValue != value) 
							|| (this._productTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productTbl.Entity = null;
						previousValue.doctor_product_productGroupTbls.Remove(this);
					}
					this._productTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_product_productGroupTbls.Add(this);
						this._productId = value.Id;
					}
					else
					{
						this._productId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.doctor_productTbl")]
	public partial class doctor_productTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _doctorId;
		
		private long _productCategoryId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<doctorTbl> _doctorTbl;
		
		private EntityRef<productCategoryTbl> _productCategoryTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OnproductCategoryIdChanging(long value);
    partial void OnproductCategoryIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public doctor_productTbl()
		{
			this._doctorTbl = default(EntityRef<doctorTbl>);
			this._productCategoryTbl = default(EntityRef<productCategoryTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._doctorTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCategoryId", DbType="BigInt NOT NULL")]
		public long productCategoryId
		{
			get
			{
				return this._productCategoryId;
			}
			set
			{
				if ((this._productCategoryId != value))
				{
					if (this._productCategoryTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._productCategoryId = value;
					this.SendPropertyChanged("productCategoryId");
					this.OnproductCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_doctor_productTbl", Storage="_doctorTbl", ThisKey="doctorId", OtherKey="Id", IsForeignKey=true)]
		public doctorTbl doctorTbl
		{
			get
			{
				return this._doctorTbl.Entity;
			}
			set
			{
				doctorTbl previousValue = this._doctorTbl.Entity;
				if (((previousValue != value) 
							|| (this._doctorTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctorTbl.Entity = null;
						previousValue.doctor_productTbls.Remove(this);
					}
					this._doctorTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_productTbls.Add(this);
						this._doctorId = value.Id;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("doctorTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_doctor_productTbl", Storage="_productCategoryTbl", ThisKey="productCategoryId", OtherKey="Id", IsForeignKey=true)]
		public productCategoryTbl productCategoryTbl
		{
			get
			{
				return this._productCategoryTbl.Entity;
			}
			set
			{
				productCategoryTbl previousValue = this._productCategoryTbl.Entity;
				if (((previousValue != value) 
							|| (this._productCategoryTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productCategoryTbl.Entity = null;
						previousValue.doctor_productTbls.Remove(this);
					}
					this._productCategoryTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_productTbls.Add(this);
						this._productCategoryId = value.Id;
					}
					else
					{
						this._productCategoryId = default(long);
					}
					this.SendPropertyChanged("productCategoryTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.doctor_serviceTbl")]
	public partial class doctor_serviceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _doctorId;
		
		private long _serviceId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<doctorTbl> _doctorTbl;
		
		private EntityRef<serviceTbl> _serviceTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OnserviceIdChanging(long value);
    partial void OnserviceIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public doctor_serviceTbl()
		{
			this._doctorTbl = default(EntityRef<doctorTbl>);
			this._serviceTbl = default(EntityRef<serviceTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._doctorTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceId", DbType="BigInt NOT NULL")]
		public long serviceId
		{
			get
			{
				return this._serviceId;
			}
			set
			{
				if ((this._serviceId != value))
				{
					if (this._serviceTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceIdChanging(value);
					this.SendPropertyChanging();
					this._serviceId = value;
					this.SendPropertyChanged("serviceId");
					this.OnserviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_doctor_serviceTbl", Storage="_doctorTbl", ThisKey="doctorId", OtherKey="Id", IsForeignKey=true)]
		public doctorTbl doctorTbl
		{
			get
			{
				return this._doctorTbl.Entity;
			}
			set
			{
				doctorTbl previousValue = this._doctorTbl.Entity;
				if (((previousValue != value) 
							|| (this._doctorTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctorTbl.Entity = null;
						previousValue.doctor_serviceTbls.Remove(this);
					}
					this._doctorTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_serviceTbls.Add(this);
						this._doctorId = value.Id;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("doctorTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_doctor_serviceTbl", Storage="_serviceTbl", ThisKey="serviceId", OtherKey="Id", IsForeignKey=true)]
		public serviceTbl serviceTbl
		{
			get
			{
				return this._serviceTbl.Entity;
			}
			set
			{
				serviceTbl previousValue = this._serviceTbl.Entity;
				if (((previousValue != value) 
							|| (this._serviceTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceTbl.Entity = null;
						previousValue.doctor_serviceTbls.Remove(this);
					}
					this._serviceTbl.Entity = value;
					if ((value != null))
					{
						value.doctor_serviceTbls.Add(this);
						this._serviceId = value.Id;
					}
					else
					{
						this._serviceId = default(long);
					}
					this.SendPropertyChanged("serviceTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.doctorTbl")]
	public partial class doctorTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _nationalCode;
		
		private string _medicalCouncilCode;
		
		private System.DateTime _dateOfBirth;
		
		private string _officePhone;
		
		private bool _gender;
		
		private string _bankName;
		
		private string _cardBankNumber;
		
		private bool _isAdvisable;
		
		private System.TimeSpan _fromHour;
		
		private System.TimeSpan _toHour;
		
		private System.Data.Linq.Binary _imgResume;
		
		private string _imgResumeFileType;
		
		private string _university;
		
		private string _practition;
		
		private System.Nullable<double> _appntmntPrcWPrescription;
		
		private System.Nullable<double> _appntmntPrcWOPrescription;
		
		private System.Nullable<double> _appntmntPrcWPrescriptionWContract;
		
		private System.Nullable<double> _appntmntPrcWOPrescriptionWOContract;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<doctor_product_productGroupTbl> _doctor_product_productGroupTbls;
		
		private EntitySet<doctor_productTbl> _doctor_productTbls;
		
		private EntitySet<doctor_serviceTbl> _doctor_serviceTbls;
		
		private EntitySet<patient_doctorTbl> _patient_doctorTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnationalCodeChanging(string value);
    partial void OnnationalCodeChanged();
    partial void OnmedicalCouncilCodeChanging(string value);
    partial void OnmedicalCouncilCodeChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    partial void OnofficePhoneChanging(string value);
    partial void OnofficePhoneChanged();
    partial void OngenderChanging(bool value);
    partial void OngenderChanged();
    partial void OnbankNameChanging(string value);
    partial void OnbankNameChanged();
    partial void OncardBankNumberChanging(string value);
    partial void OncardBankNumberChanged();
    partial void OnisAdvisableChanging(bool value);
    partial void OnisAdvisableChanged();
    partial void OnfromHourChanging(System.TimeSpan value);
    partial void OnfromHourChanged();
    partial void OntoHourChanging(System.TimeSpan value);
    partial void OntoHourChanged();
    partial void OnimgResumeChanging(System.Data.Linq.Binary value);
    partial void OnimgResumeChanged();
    partial void OnimgResumeFileTypeChanging(string value);
    partial void OnimgResumeFileTypeChanged();
    partial void OnuniversityChanging(string value);
    partial void OnuniversityChanged();
    partial void OnpractitionChanging(string value);
    partial void OnpractitionChanged();
    partial void OnappntmntPrcWPrescriptionChanging(System.Nullable<double> value);
    partial void OnappntmntPrcWPrescriptionChanged();
    partial void OnappntmntPrcWOPrescriptionChanging(System.Nullable<double> value);
    partial void OnappntmntPrcWOPrescriptionChanged();
    partial void OnappntmntPrcWPrescriptionWContractChanging(System.Nullable<double> value);
    partial void OnappntmntPrcWPrescriptionWContractChanged();
    partial void OnappntmntPrcWOPrescriptionWOContractChanging(System.Nullable<double> value);
    partial void OnappntmntPrcWOPrescriptionWOContractChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public doctorTbl()
		{
			this._doctor_product_productGroupTbls = new EntitySet<doctor_product_productGroupTbl>(new Action<doctor_product_productGroupTbl>(this.attach_doctor_product_productGroupTbls), new Action<doctor_product_productGroupTbl>(this.detach_doctor_product_productGroupTbls));
			this._doctor_productTbls = new EntitySet<doctor_productTbl>(new Action<doctor_productTbl>(this.attach_doctor_productTbls), new Action<doctor_productTbl>(this.detach_doctor_productTbls));
			this._doctor_serviceTbls = new EntitySet<doctor_serviceTbl>(new Action<doctor_serviceTbl>(this.attach_doctor_serviceTbls), new Action<doctor_serviceTbl>(this.detach_doctor_serviceTbls));
			this._patient_doctorTbls = new EntitySet<patient_doctorTbl>(new Action<patient_doctorTbl>(this.attach_patient_doctorTbls), new Action<patient_doctorTbl>(this.detach_patient_doctorTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationalCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string nationalCode
		{
			get
			{
				return this._nationalCode;
			}
			set
			{
				if ((this._nationalCode != value))
				{
					this.OnnationalCodeChanging(value);
					this.SendPropertyChanging();
					this._nationalCode = value;
					this.SendPropertyChanged("nationalCode");
					this.OnnationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalCouncilCode", DbType="NChar(8) NOT NULL", CanBeNull=false)]
		public string medicalCouncilCode
		{
			get
			{
				return this._medicalCouncilCode;
			}
			set
			{
				if ((this._medicalCouncilCode != value))
				{
					this.OnmedicalCouncilCodeChanging(value);
					this.SendPropertyChanging();
					this._medicalCouncilCode = value;
					this.SendPropertyChanged("medicalCouncilCode");
					this.OnmedicalCouncilCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_officePhone", DbType="Char(11)")]
		public string officePhone
		{
			get
			{
				return this._officePhone;
			}
			set
			{
				if ((this._officePhone != value))
				{
					this.OnofficePhoneChanging(value);
					this.SendPropertyChanging();
					this._officePhone = value;
					this.SendPropertyChanged("officePhone");
					this.OnofficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Bit NOT NULL")]
		public bool gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bankName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string bankName
		{
			get
			{
				return this._bankName;
			}
			set
			{
				if ((this._bankName != value))
				{
					this.OnbankNameChanging(value);
					this.SendPropertyChanging();
					this._bankName = value;
					this.SendPropertyChanged("bankName");
					this.OnbankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardBankNumber", DbType="NChar(16) NOT NULL", CanBeNull=false)]
		public string cardBankNumber
		{
			get
			{
				return this._cardBankNumber;
			}
			set
			{
				if ((this._cardBankNumber != value))
				{
					this.OncardBankNumberChanging(value);
					this.SendPropertyChanging();
					this._cardBankNumber = value;
					this.SendPropertyChanged("cardBankNumber");
					this.OncardBankNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdvisable", DbType="Bit NOT NULL")]
		public bool isAdvisable
		{
			get
			{
				return this._isAdvisable;
			}
			set
			{
				if ((this._isAdvisable != value))
				{
					this.OnisAdvisableChanging(value);
					this.SendPropertyChanging();
					this._isAdvisable = value;
					this.SendPropertyChanged("isAdvisable");
					this.OnisAdvisableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromHour", DbType="Time NOT NULL")]
		public System.TimeSpan fromHour
		{
			get
			{
				return this._fromHour;
			}
			set
			{
				if ((this._fromHour != value))
				{
					this.OnfromHourChanging(value);
					this.SendPropertyChanging();
					this._fromHour = value;
					this.SendPropertyChanged("fromHour");
					this.OnfromHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toHour", DbType="Time NOT NULL")]
		public System.TimeSpan toHour
		{
			get
			{
				return this._toHour;
			}
			set
			{
				if ((this._toHour != value))
				{
					this.OntoHourChanging(value);
					this.SendPropertyChanging();
					this._toHour = value;
					this.SendPropertyChanged("toHour");
					this.OntoHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgResume", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imgResume
		{
			get
			{
				return this._imgResume;
			}
			set
			{
				if ((this._imgResume != value))
				{
					this.OnimgResumeChanging(value);
					this.SendPropertyChanging();
					this._imgResume = value;
					this.SendPropertyChanged("imgResume");
					this.OnimgResumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgResumeFileType", DbType="NVarChar(50)")]
		public string imgResumeFileType
		{
			get
			{
				return this._imgResumeFileType;
			}
			set
			{
				if ((this._imgResumeFileType != value))
				{
					this.OnimgResumeFileTypeChanging(value);
					this.SendPropertyChanging();
					this._imgResumeFileType = value;
					this.SendPropertyChanged("imgResumeFileType");
					this.OnimgResumeFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_university", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string university
		{
			get
			{
				return this._university;
			}
			set
			{
				if ((this._university != value))
				{
					this.OnuniversityChanging(value);
					this.SendPropertyChanging();
					this._university = value;
					this.SendPropertyChanged("university");
					this.OnuniversityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practition", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string practition
		{
			get
			{
				return this._practition;
			}
			set
			{
				if ((this._practition != value))
				{
					this.OnpractitionChanging(value);
					this.SendPropertyChanging();
					this._practition = value;
					this.SendPropertyChanged("practition");
					this.OnpractitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appntmntPrcWPrescription", DbType="Float")]
		public System.Nullable<double> appntmntPrcWPrescription
		{
			get
			{
				return this._appntmntPrcWPrescription;
			}
			set
			{
				if ((this._appntmntPrcWPrescription != value))
				{
					this.OnappntmntPrcWPrescriptionChanging(value);
					this.SendPropertyChanging();
					this._appntmntPrcWPrescription = value;
					this.SendPropertyChanged("appntmntPrcWPrescription");
					this.OnappntmntPrcWPrescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appntmntPrcWOPrescription", DbType="Float")]
		public System.Nullable<double> appntmntPrcWOPrescription
		{
			get
			{
				return this._appntmntPrcWOPrescription;
			}
			set
			{
				if ((this._appntmntPrcWOPrescription != value))
				{
					this.OnappntmntPrcWOPrescriptionChanging(value);
					this.SendPropertyChanging();
					this._appntmntPrcWOPrescription = value;
					this.SendPropertyChanged("appntmntPrcWOPrescription");
					this.OnappntmntPrcWOPrescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appntmntPrcWPrescriptionWContract", DbType="Float")]
		public System.Nullable<double> appntmntPrcWPrescriptionWContract
		{
			get
			{
				return this._appntmntPrcWPrescriptionWContract;
			}
			set
			{
				if ((this._appntmntPrcWPrescriptionWContract != value))
				{
					this.OnappntmntPrcWPrescriptionWContractChanging(value);
					this.SendPropertyChanging();
					this._appntmntPrcWPrescriptionWContract = value;
					this.SendPropertyChanged("appntmntPrcWPrescriptionWContract");
					this.OnappntmntPrcWPrescriptionWContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appntmntPrcWOPrescriptionWOContract", DbType="Float")]
		public System.Nullable<double> appntmntPrcWOPrescriptionWOContract
		{
			get
			{
				return this._appntmntPrcWOPrescriptionWOContract;
			}
			set
			{
				if ((this._appntmntPrcWOPrescriptionWOContract != value))
				{
					this.OnappntmntPrcWOPrescriptionWOContractChanging(value);
					this.SendPropertyChanging();
					this._appntmntPrcWOPrescriptionWOContract = value;
					this.SendPropertyChanged("appntmntPrcWOPrescriptionWOContract");
					this.OnappntmntPrcWOPrescriptionWOContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_doctor_product_productGroupTbl", Storage="_doctor_product_productGroupTbls", ThisKey="Id", OtherKey="doctorId")]
		public EntitySet<doctor_product_productGroupTbl> doctor_product_productGroupTbls
		{
			get
			{
				return this._doctor_product_productGroupTbls;
			}
			set
			{
				this._doctor_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_doctor_productTbl", Storage="_doctor_productTbls", ThisKey="Id", OtherKey="doctorId")]
		public EntitySet<doctor_productTbl> doctor_productTbls
		{
			get
			{
				return this._doctor_productTbls;
			}
			set
			{
				this._doctor_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_doctor_serviceTbl", Storage="_doctor_serviceTbls", ThisKey="Id", OtherKey="doctorId")]
		public EntitySet<doctor_serviceTbl> doctor_serviceTbls
		{
			get
			{
				return this._doctor_serviceTbls;
			}
			set
			{
				this._doctor_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_patient_doctorTbl", Storage="_patient_doctorTbls", ThisKey="Id", OtherKey="doctorId")]
		public EntitySet<patient_doctorTbl> patient_doctorTbls
		{
			get
			{
				return this._patient_doctorTbls;
			}
			set
			{
				this._patient_doctorTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_doctorTbl", Storage="_userTbl", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.doctorTbl = null;
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.doctorTbl = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_doctor_product_productGroupTbls(doctor_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = this;
		}
		
		private void detach_doctor_product_productGroupTbls(doctor_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = null;
		}
		
		private void attach_doctor_productTbls(doctor_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = this;
		}
		
		private void detach_doctor_productTbls(doctor_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = null;
		}
		
		private void attach_doctor_serviceTbls(doctor_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = this;
		}
		
		private void detach_doctor_serviceTbls(doctor_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = null;
		}
		
		private void attach_patient_doctorTbls(patient_doctorTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = this;
		}
		
		private void detach_patient_doctorTbls(patient_doctorTbl entity)
		{
			this.SendPropertyChanging();
			entity.doctorTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.documentTbl")]
	public partial class documentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _userId;
		
		private System.Data.Linq.Binary _image;
		
		private string _fileType;
		
		private string _subject;
		
		private string _text;
		
		private System.DateTime _documentDate;
		
		private string _doctorName;
		
		private long _documentTypeId;
		
		private System.DateTime _registerDate;
		
		private byte _status;
		
		private EntityRef<documentTypeTbl> _documentTypeTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OndocumentDateChanging(System.DateTime value);
    partial void OndocumentDateChanged();
    partial void OndoctorNameChanging(string value);
    partial void OndoctorNameChanged();
    partial void OndocumentTypeIdChanging(long value);
    partial void OndocumentTypeIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public documentTbl()
		{
			this._documentTypeTbl = default(EntityRef<documentTypeTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentDate", DbType="DateTime NOT NULL")]
		public System.DateTime documentDate
		{
			get
			{
				return this._documentDate;
			}
			set
			{
				if ((this._documentDate != value))
				{
					this.OndocumentDateChanging(value);
					this.SendPropertyChanging();
					this._documentDate = value;
					this.SendPropertyChanged("documentDate");
					this.OndocumentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string doctorName
		{
			get
			{
				return this._doctorName;
			}
			set
			{
				if ((this._doctorName != value))
				{
					this.OndoctorNameChanging(value);
					this.SendPropertyChanging();
					this._doctorName = value;
					this.SendPropertyChanged("doctorName");
					this.OndoctorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentTypeId", DbType="BigInt NOT NULL")]
		public long documentTypeId
		{
			get
			{
				return this._documentTypeId;
			}
			set
			{
				if ((this._documentTypeId != value))
				{
					if (this._documentTypeTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndocumentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._documentTypeId = value;
					this.SendPropertyChanged("documentTypeId");
					this.OndocumentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="documentTypeTbl_documentTbl", Storage="_documentTypeTbl", ThisKey="documentTypeId", OtherKey="Id", IsForeignKey=true)]
		public documentTypeTbl documentTypeTbl
		{
			get
			{
				return this._documentTypeTbl.Entity;
			}
			set
			{
				documentTypeTbl previousValue = this._documentTypeTbl.Entity;
				if (((previousValue != value) 
							|| (this._documentTypeTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._documentTypeTbl.Entity = null;
						previousValue.documentTbls.Remove(this);
					}
					this._documentTypeTbl.Entity = value;
					if ((value != null))
					{
						value.documentTbls.Add(this);
						this._documentTypeId = value.Id;
					}
					else
					{
						this._documentTypeId = default(long);
					}
					this.SendPropertyChanged("documentTypeTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_documentTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.documentTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.documentTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.documentTypeTbl")]
	public partial class documentTypeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private long _roleId;
		
		private EntitySet<documentTbl> _documentTbls;
		
		private EntityRef<roleTbl> _roleTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnroleIdChanging(long value);
    partial void OnroleIdChanged();
    #endregion
		
		public documentTypeTbl()
		{
			this._documentTbls = new EntitySet<documentTbl>(new Action<documentTbl>(this.attach_documentTbls), new Action<documentTbl>(this.detach_documentTbls));
			this._roleTbl = default(EntityRef<roleTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="BigInt NOT NULL")]
		public long roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._roleTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="documentTypeTbl_documentTbl", Storage="_documentTbls", ThisKey="Id", OtherKey="documentTypeId")]
		public EntitySet<documentTbl> documentTbls
		{
			get
			{
				return this._documentTbls;
			}
			set
			{
				this._documentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_documentTypeTbl", Storage="_roleTbl", ThisKey="roleId", OtherKey="Id", IsForeignKey=true)]
		public roleTbl roleTbl
		{
			get
			{
				return this._roleTbl.Entity;
			}
			set
			{
				roleTbl previousValue = this._roleTbl.Entity;
				if (((previousValue != value) 
							|| (this._roleTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._roleTbl.Entity = null;
						previousValue.documentTypeTbls.Remove(this);
					}
					this._roleTbl.Entity = value;
					if ((value != null))
					{
						value.documentTypeTbls.Add(this);
						this._roleId = value.Id;
					}
					else
					{
						this._roleId = default(long);
					}
					this.SendPropertyChanged("roleTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_documentTbls(documentTbl entity)
		{
			this.SendPropertyChanging();
			entity.documentTypeTbl = this;
		}
		
		private void detach_documentTbls(documentTbl entity)
		{
			this.SendPropertyChanging();
			entity.documentTypeTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.educationTbl")]
	public partial class educationTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<patientTbl> _patientTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public educationTbl()
		{
			this._patientTbls = new EntitySet<patientTbl>(new Action<patientTbl>(this.attach_patientTbls), new Action<patientTbl>(this.detach_patientTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="educationTbl_patientTbl", Storage="_patientTbls", ThisKey="Id", OtherKey="educationId")]
		public EntitySet<patientTbl> patientTbls
		{
			get
			{
				return this._patientTbls;
			}
			set
			{
				this._patientTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_patientTbls(patientTbl entity)
		{
			this.SendPropertyChanging();
			entity.educationTbl = this;
		}
		
		private void detach_patientTbls(patientTbl entity)
		{
			this.SendPropertyChanging();
			entity.educationTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.equipment_product_productGroupTbl")]
	public partial class equipment_product_productGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _equipmentId;
		
		private System.Nullable<long> _productGroupId;
		
		private System.Nullable<long> _productId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<equipmentTbl> _equipmentTbl;
		
		private EntityRef<productGroupTbl> _productGroupTbl;
		
		private EntityRef<productTbl> _productTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnequipmentIdChanging(long value);
    partial void OnequipmentIdChanged();
    partial void OnproductGroupIdChanging(System.Nullable<long> value);
    partial void OnproductGroupIdChanged();
    partial void OnproductIdChanging(System.Nullable<long> value);
    partial void OnproductIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public equipment_product_productGroupTbl()
		{
			this._equipmentTbl = default(EntityRef<equipmentTbl>);
			this._productGroupTbl = default(EntityRef<productGroupTbl>);
			this._productTbl = default(EntityRef<productTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_equipmentId", DbType="BigInt NOT NULL")]
		public long equipmentId
		{
			get
			{
				return this._equipmentId;
			}
			set
			{
				if ((this._equipmentId != value))
				{
					if (this._equipmentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnequipmentIdChanging(value);
					this.SendPropertyChanging();
					this._equipmentId = value;
					this.SendPropertyChanged("equipmentId");
					this.OnequipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productGroupId", DbType="BigInt")]
		public System.Nullable<long> productGroupId
		{
			get
			{
				return this._productGroupId;
			}
			set
			{
				if ((this._productGroupId != value))
				{
					if (this._productGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductGroupIdChanging(value);
					this.SendPropertyChanging();
					this._productGroupId = value;
					this.SendPropertyChanged("productGroupId");
					this.OnproductGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productId", DbType="BigInt")]
		public System.Nullable<long> productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					if (this._productTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIdChanging(value);
					this.SendPropertyChanging();
					this._productId = value;
					this.SendPropertyChanged("productId");
					this.OnproductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="equipmentTbl_equipment_product_productGroupTbl", Storage="_equipmentTbl", ThisKey="equipmentId", OtherKey="Id", IsForeignKey=true)]
		public equipmentTbl equipmentTbl
		{
			get
			{
				return this._equipmentTbl.Entity;
			}
			set
			{
				equipmentTbl previousValue = this._equipmentTbl.Entity;
				if (((previousValue != value) 
							|| (this._equipmentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._equipmentTbl.Entity = null;
						previousValue.equipment_product_productGroupTbls.Remove(this);
					}
					this._equipmentTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_product_productGroupTbls.Add(this);
						this._equipmentId = value.Id;
					}
					else
					{
						this._equipmentId = default(long);
					}
					this.SendPropertyChanged("equipmentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_equipment_product_productGroupTbl", Storage="_productGroupTbl", ThisKey="productGroupId", OtherKey="Id", IsForeignKey=true)]
		public productGroupTbl productGroupTbl
		{
			get
			{
				return this._productGroupTbl.Entity;
			}
			set
			{
				productGroupTbl previousValue = this._productGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._productGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productGroupTbl.Entity = null;
						previousValue.equipment_product_productGroupTbls.Remove(this);
					}
					this._productGroupTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_product_productGroupTbls.Add(this);
						this._productGroupId = value.Id;
					}
					else
					{
						this._productGroupId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_equipment_product_productGroupTbl", Storage="_productTbl", ThisKey="productId", OtherKey="Id", IsForeignKey=true)]
		public productTbl productTbl
		{
			get
			{
				return this._productTbl.Entity;
			}
			set
			{
				productTbl previousValue = this._productTbl.Entity;
				if (((previousValue != value) 
							|| (this._productTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productTbl.Entity = null;
						previousValue.equipment_product_productGroupTbls.Remove(this);
					}
					this._productTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_product_productGroupTbls.Add(this);
						this._productId = value.Id;
					}
					else
					{
						this._productId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.equipment_productTbl")]
	public partial class equipment_productTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _equipmentId;
		
		private long _productCategoryId;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntityRef<equipmentTbl> _equipmentTbl;
		
		private EntityRef<productCategoryTbl> _productCategoryTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnequipmentIdChanging(long value);
    partial void OnequipmentIdChanged();
    partial void OnproductCategoryIdChanging(long value);
    partial void OnproductCategoryIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public equipment_productTbl()
		{
			this._equipmentTbl = default(EntityRef<equipmentTbl>);
			this._productCategoryTbl = default(EntityRef<productCategoryTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_equipmentId", DbType="BigInt NOT NULL")]
		public long equipmentId
		{
			get
			{
				return this._equipmentId;
			}
			set
			{
				if ((this._equipmentId != value))
				{
					if (this._equipmentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnequipmentIdChanging(value);
					this.SendPropertyChanging();
					this._equipmentId = value;
					this.SendPropertyChanged("equipmentId");
					this.OnequipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCategoryId", DbType="BigInt NOT NULL")]
		public long productCategoryId
		{
			get
			{
				return this._productCategoryId;
			}
			set
			{
				if ((this._productCategoryId != value))
				{
					if (this._productCategoryTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._productCategoryId = value;
					this.SendPropertyChanged("productCategoryId");
					this.OnproductCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="equipmentTbl_equipment_productTbl", Storage="_equipmentTbl", ThisKey="equipmentId", OtherKey="Id", IsForeignKey=true)]
		public equipmentTbl equipmentTbl
		{
			get
			{
				return this._equipmentTbl.Entity;
			}
			set
			{
				equipmentTbl previousValue = this._equipmentTbl.Entity;
				if (((previousValue != value) 
							|| (this._equipmentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._equipmentTbl.Entity = null;
						previousValue.equipment_productTbls.Remove(this);
					}
					this._equipmentTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_productTbls.Add(this);
						this._equipmentId = value.Id;
					}
					else
					{
						this._equipmentId = default(long);
					}
					this.SendPropertyChanged("equipmentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_equipment_productTbl", Storage="_productCategoryTbl", ThisKey="productCategoryId", OtherKey="Id", IsForeignKey=true)]
		public productCategoryTbl productCategoryTbl
		{
			get
			{
				return this._productCategoryTbl.Entity;
			}
			set
			{
				productCategoryTbl previousValue = this._productCategoryTbl.Entity;
				if (((previousValue != value) 
							|| (this._productCategoryTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productCategoryTbl.Entity = null;
						previousValue.equipment_productTbls.Remove(this);
					}
					this._productCategoryTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_productTbls.Add(this);
						this._productCategoryId = value.Id;
					}
					else
					{
						this._productCategoryId = default(long);
					}
					this.SendPropertyChanged("productCategoryTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.equipment_serviceTbl")]
	public partial class equipment_serviceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _equipmentId;
		
		private long _serviceId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<equipmentTbl> _equipmentTbl;
		
		private EntityRef<serviceTbl> _serviceTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnequipmentIdChanging(long value);
    partial void OnequipmentIdChanged();
    partial void OnserviceIdChanging(long value);
    partial void OnserviceIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public equipment_serviceTbl()
		{
			this._equipmentTbl = default(EntityRef<equipmentTbl>);
			this._serviceTbl = default(EntityRef<serviceTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_equipmentId", DbType="BigInt NOT NULL")]
		public long equipmentId
		{
			get
			{
				return this._equipmentId;
			}
			set
			{
				if ((this._equipmentId != value))
				{
					if (this._equipmentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnequipmentIdChanging(value);
					this.SendPropertyChanging();
					this._equipmentId = value;
					this.SendPropertyChanged("equipmentId");
					this.OnequipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceId", DbType="BigInt NOT NULL")]
		public long serviceId
		{
			get
			{
				return this._serviceId;
			}
			set
			{
				if ((this._serviceId != value))
				{
					if (this._serviceTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceIdChanging(value);
					this.SendPropertyChanging();
					this._serviceId = value;
					this.SendPropertyChanged("serviceId");
					this.OnserviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="equipmentTbl_equipment_serviceTbl", Storage="_equipmentTbl", ThisKey="equipmentId", OtherKey="Id", IsForeignKey=true)]
		public equipmentTbl equipmentTbl
		{
			get
			{
				return this._equipmentTbl.Entity;
			}
			set
			{
				equipmentTbl previousValue = this._equipmentTbl.Entity;
				if (((previousValue != value) 
							|| (this._equipmentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._equipmentTbl.Entity = null;
						previousValue.equipment_serviceTbls.Remove(this);
					}
					this._equipmentTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_serviceTbls.Add(this);
						this._equipmentId = value.Id;
					}
					else
					{
						this._equipmentId = default(long);
					}
					this.SendPropertyChanged("equipmentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_equipment_serviceTbl", Storage="_serviceTbl", ThisKey="serviceId", OtherKey="Id", IsForeignKey=true)]
		public serviceTbl serviceTbl
		{
			get
			{
				return this._serviceTbl.Entity;
			}
			set
			{
				serviceTbl previousValue = this._serviceTbl.Entity;
				if (((previousValue != value) 
							|| (this._serviceTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceTbl.Entity = null;
						previousValue.equipment_serviceTbls.Remove(this);
					}
					this._serviceTbl.Entity = value;
					if ((value != null))
					{
						value.equipment_serviceTbls.Add(this);
						this._serviceId = value.Id;
					}
					else
					{
						this._serviceId = default(long);
					}
					this.SendPropertyChanged("serviceTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.equipmentTbl")]
	public partial class equipmentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _companyRegistrationNumber;
		
		private string _phone;
		
		private string _fax;
		
		private string _workScope;
		
		private System.Data.Linq.Binary _imgSignature;
		
		private string _imgSignatureFileType;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<equipment_product_productGroupTbl> _equipment_product_productGroupTbls;
		
		private EntitySet<equipment_productTbl> _equipment_productTbls;
		
		private EntitySet<equipment_serviceTbl> _equipment_serviceTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncompanyRegistrationNumberChanging(string value);
    partial void OncompanyRegistrationNumberChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void OnworkScopeChanging(string value);
    partial void OnworkScopeChanged();
    partial void OnimgSignatureChanging(System.Data.Linq.Binary value);
    partial void OnimgSignatureChanged();
    partial void OnimgSignatureFileTypeChanging(string value);
    partial void OnimgSignatureFileTypeChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public equipmentTbl()
		{
			this._equipment_product_productGroupTbls = new EntitySet<equipment_product_productGroupTbl>(new Action<equipment_product_productGroupTbl>(this.attach_equipment_product_productGroupTbls), new Action<equipment_product_productGroupTbl>(this.detach_equipment_product_productGroupTbls));
			this._equipment_productTbls = new EntitySet<equipment_productTbl>(new Action<equipment_productTbl>(this.attach_equipment_productTbls), new Action<equipment_productTbl>(this.detach_equipment_productTbls));
			this._equipment_serviceTbls = new EntitySet<equipment_serviceTbl>(new Action<equipment_serviceTbl>(this.attach_equipment_serviceTbls), new Action<equipment_serviceTbl>(this.detach_equipment_serviceTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyRegistrationNumber", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string companyRegistrationNumber
		{
			get
			{
				return this._companyRegistrationNumber;
			}
			set
			{
				if ((this._companyRegistrationNumber != value))
				{
					this.OncompanyRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._companyRegistrationNumber = value;
					this.SendPropertyChanged("companyRegistrationNumber");
					this.OncompanyRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="Char(11)")]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workScope", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string workScope
		{
			get
			{
				return this._workScope;
			}
			set
			{
				if ((this._workScope != value))
				{
					this.OnworkScopeChanging(value);
					this.SendPropertyChanging();
					this._workScope = value;
					this.SendPropertyChanged("workScope");
					this.OnworkScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgSignature", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imgSignature
		{
			get
			{
				return this._imgSignature;
			}
			set
			{
				if ((this._imgSignature != value))
				{
					this.OnimgSignatureChanging(value);
					this.SendPropertyChanging();
					this._imgSignature = value;
					this.SendPropertyChanged("imgSignature");
					this.OnimgSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgSignatureFileType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imgSignatureFileType
		{
			get
			{
				return this._imgSignatureFileType;
			}
			set
			{
				if ((this._imgSignatureFileType != value))
				{
					this.OnimgSignatureFileTypeChanging(value);
					this.SendPropertyChanging();
					this._imgSignatureFileType = value;
					this.SendPropertyChanged("imgSignatureFileType");
					this.OnimgSignatureFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="equipmentTbl_equipment_product_productGroupTbl", Storage="_equipment_product_productGroupTbls", ThisKey="Id", OtherKey="equipmentId")]
		public EntitySet<equipment_product_productGroupTbl> equipment_product_productGroupTbls
		{
			get
			{
				return this._equipment_product_productGroupTbls;
			}
			set
			{
				this._equipment_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="equipmentTbl_equipment_productTbl", Storage="_equipment_productTbls", ThisKey="Id", OtherKey="equipmentId")]
		public EntitySet<equipment_productTbl> equipment_productTbls
		{
			get
			{
				return this._equipment_productTbls;
			}
			set
			{
				this._equipment_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="equipmentTbl_equipment_serviceTbl", Storage="_equipment_serviceTbls", ThisKey="Id", OtherKey="equipmentId")]
		public EntitySet<equipment_serviceTbl> equipment_serviceTbls
		{
			get
			{
				return this._equipment_serviceTbls;
			}
			set
			{
				this._equipment_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_equipmentTbl", Storage="_userTbl", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.equipmentTbl = null;
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.equipmentTbl = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_equipment_product_productGroupTbls(equipment_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.equipmentTbl = this;
		}
		
		private void detach_equipment_product_productGroupTbls(equipment_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.equipmentTbl = null;
		}
		
		private void attach_equipment_productTbls(equipment_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.equipmentTbl = this;
		}
		
		private void detach_equipment_productTbls(equipment_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.equipmentTbl = null;
		}
		
		private void attach_equipment_serviceTbls(equipment_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.equipmentTbl = this;
		}
		
		private void detach_equipment_serviceTbls(equipment_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.equipmentTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.guarantyTypeTbl")]
	public partial class guarantyTypeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<productTbl> _productTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public guarantyTypeTbl()
		{
			this._productTbls = new EntitySet<productTbl>(new Action<productTbl>(this.attach_productTbls), new Action<productTbl>(this.detach_productTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="guarantyTypeTbl_productTbl", Storage="_productTbls", ThisKey="Id", OtherKey="garantyTypeId")]
		public EntitySet<productTbl> productTbls
		{
			get
			{
				return this._productTbls;
			}
			set
			{
				this._productTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_productTbls(productTbl entity)
		{
			this.SendPropertyChanging();
			entity.guarantyTypeTbl = this;
		}
		
		private void detach_productTbls(productTbl entity)
		{
			this.SendPropertyChanging();
			entity.guarantyTypeTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.insuranceTbl")]
	public partial class insuranceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private System.DateTime _registerDate;
		
		private EntitySet<patient_insuranceTbl> _patient_insuranceTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public insuranceTbl()
		{
			this._patient_insuranceTbls = new EntitySet<patient_insuranceTbl>(new Action<patient_insuranceTbl>(this.attach_patient_insuranceTbls), new Action<patient_insuranceTbl>(this.detach_patient_insuranceTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="insuranceTbl_patient_insuranceTbl", Storage="_patient_insuranceTbls", ThisKey="Id", OtherKey="insuranceId")]
		public EntitySet<patient_insuranceTbl> patient_insuranceTbls
		{
			get
			{
				return this._patient_insuranceTbls;
			}
			set
			{
				this._patient_insuranceTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_patient_insuranceTbls(patient_insuranceTbl entity)
		{
			this.SendPropertyChanging();
			entity.insuranceTbl = this;
		}
		
		private void detach_patient_insuranceTbls(patient_insuranceTbl entity)
		{
			this.SendPropertyChanging();
			entity.insuranceTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.message_userGroupTbl")]
	public partial class message_userGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _messageId;
		
		private long _userGroupId;
		
		private System.DateTime _registerDate;
		
		private long _registerUserId;
		
		private EntityRef<messageTbl> _messageTbl;
		
		private EntityRef<userGroupTbl> _userGroupTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnmessageIdChanging(long value);
    partial void OnmessageIdChanged();
    partial void OnuserGroupIdChanging(long value);
    partial void OnuserGroupIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    #endregion
		
		public message_userGroupTbl()
		{
			this._messageTbl = default(EntityRef<messageTbl>);
			this._userGroupTbl = default(EntityRef<userGroupTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageId", DbType="BigInt NOT NULL")]
		public long messageId
		{
			get
			{
				return this._messageId;
			}
			set
			{
				if ((this._messageId != value))
				{
					if (this._messageTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmessageIdChanging(value);
					this.SendPropertyChanging();
					this._messageId = value;
					this.SendPropertyChanged("messageId");
					this.OnmessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userGroupId", DbType="BigInt NOT NULL")]
		public long userGroupId
		{
			get
			{
				return this._userGroupId;
			}
			set
			{
				if ((this._userGroupId != value))
				{
					if (this._userGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._userGroupId = value;
					this.SendPropertyChanged("userGroupId");
					this.OnuserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messageTbl_message_userGroupTbl", Storage="_messageTbl", ThisKey="messageId", OtherKey="Id", IsForeignKey=true)]
		public messageTbl messageTbl
		{
			get
			{
				return this._messageTbl.Entity;
			}
			set
			{
				messageTbl previousValue = this._messageTbl.Entity;
				if (((previousValue != value) 
							|| (this._messageTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._messageTbl.Entity = null;
						previousValue.message_userGroupTbls.Remove(this);
					}
					this._messageTbl.Entity = value;
					if ((value != null))
					{
						value.message_userGroupTbls.Add(this);
						this._messageId = value.Id;
					}
					else
					{
						this._messageId = default(long);
					}
					this.SendPropertyChanged("messageTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userGroupTbl_message_userGroupTbl", Storage="_userGroupTbl", ThisKey="userGroupId", OtherKey="Id", IsForeignKey=true)]
		public userGroupTbl userGroupTbl
		{
			get
			{
				return this._userGroupTbl.Entity;
			}
			set
			{
				userGroupTbl previousValue = this._userGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._userGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userGroupTbl.Entity = null;
						previousValue.message_userGroupTbls.Remove(this);
					}
					this._userGroupTbl.Entity = value;
					if ((value != null))
					{
						value.message_userGroupTbls.Add(this);
						this._userGroupId = value.Id;
					}
					else
					{
						this._userGroupId = default(long);
					}
					this.SendPropertyChanged("userGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_message_userGroupTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.message_userGroupTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.message_userGroupTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.message_userTbl")]
	public partial class message_userTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _userId;
		
		private string _subject;
		
		private string _text;
		
		private bool _isRead;
		
		private System.DateTime _registerDate;
		
		private string _mobile;
		
		private long _registerUserId;
		
		private byte _type;
		
		private EntityRef<userTbl> _userTbl;
		
		private EntityRef<userTbl> _userTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisReadChanging(bool value);
    partial void OnisReadChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    #endregion
		
		public message_userTbl()
		{
			this._userTbl = default(EntityRef<userTbl>);
			this._userTbl1 = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isRead", DbType="Bit NOT NULL")]
		public bool isRead
		{
			get
			{
				return this._isRead;
			}
			set
			{
				if ((this._isRead != value))
				{
					this.OnisReadChanging(value);
					this.SendPropertyChanging();
					this._isRead = value;
					this.SendPropertyChanged("isRead");
					this.OnisReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="TinyInt NOT NULL")]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_message_userTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.message_userTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.message_userTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_message_userTbl1", Storage="_userTbl1", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl1
		{
			get
			{
				return this._userTbl1.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl1.Entity;
				if (((previousValue != value) 
							|| (this._userTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl1.Entity = null;
						previousValue.message_userTbls1.Remove(this);
					}
					this._userTbl1.Entity = value;
					if ((value != null))
					{
						value.message_userTbls1.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messageTbl")]
	public partial class messageTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _subject;
		
		private string _text;
		
		private EntitySet<message_userGroupTbl> _message_userGroupTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public messageTbl()
		{
			this._message_userGroupTbls = new EntitySet<message_userGroupTbl>(new Action<message_userGroupTbl>(this.attach_message_userGroupTbls), new Action<message_userGroupTbl>(this.detach_message_userGroupTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messageTbl_message_userGroupTbl", Storage="_message_userGroupTbls", ThisKey="Id", OtherKey="messageId")]
		public EntitySet<message_userGroupTbl> message_userGroupTbls
		{
			get
			{
				return this._message_userGroupTbls;
			}
			set
			{
				this._message_userGroupTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_message_userGroupTbls(message_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.messageTbl = this;
		}
		
		private void detach_message_userGroupTbls(message_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.messageTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ngo_product_productGroupTbl")]
	public partial class ngo_product_productGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ngoId;
		
		private System.Nullable<long> _productGroupId;
		
		private System.Nullable<long> _productId;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<ngoTbl> _ngoTbl;
		
		private EntityRef<productGroupTbl> _productGroupTbl;
		
		private EntityRef<productTbl> _productTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnngoIdChanging(long value);
    partial void OnngoIdChanged();
    partial void OnproductGroupIdChanging(System.Nullable<long> value);
    partial void OnproductGroupIdChanged();
    partial void OnproductIdChanging(System.Nullable<long> value);
    partial void OnproductIdChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public ngo_product_productGroupTbl()
		{
			this._ngoTbl = default(EntityRef<ngoTbl>);
			this._productGroupTbl = default(EntityRef<productGroupTbl>);
			this._productTbl = default(EntityRef<productTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ngoId", DbType="BigInt NOT NULL")]
		public long ngoId
		{
			get
			{
				return this._ngoId;
			}
			set
			{
				if ((this._ngoId != value))
				{
					if (this._ngoTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnngoIdChanging(value);
					this.SendPropertyChanging();
					this._ngoId = value;
					this.SendPropertyChanged("ngoId");
					this.OnngoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productGroupId", DbType="BigInt")]
		public System.Nullable<long> productGroupId
		{
			get
			{
				return this._productGroupId;
			}
			set
			{
				if ((this._productGroupId != value))
				{
					if (this._productGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductGroupIdChanging(value);
					this.SendPropertyChanging();
					this._productGroupId = value;
					this.SendPropertyChanged("productGroupId");
					this.OnproductGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productId", DbType="BigInt")]
		public System.Nullable<long> productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					if (this._productTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIdChanging(value);
					this.SendPropertyChanging();
					this._productId = value;
					this.SendPropertyChanged("productId");
					this.OnproductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ngoTbl_ngo_product_productGroupTbl", Storage="_ngoTbl", ThisKey="ngoId", OtherKey="Id", IsForeignKey=true)]
		public ngoTbl ngoTbl
		{
			get
			{
				return this._ngoTbl.Entity;
			}
			set
			{
				ngoTbl previousValue = this._ngoTbl.Entity;
				if (((previousValue != value) 
							|| (this._ngoTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ngoTbl.Entity = null;
						previousValue.ngo_product_productGroupTbls.Remove(this);
					}
					this._ngoTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_product_productGroupTbls.Add(this);
						this._ngoId = value.Id;
					}
					else
					{
						this._ngoId = default(long);
					}
					this.SendPropertyChanged("ngoTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_ngo_product_productGroupTbl", Storage="_productGroupTbl", ThisKey="productGroupId", OtherKey="Id", IsForeignKey=true)]
		public productGroupTbl productGroupTbl
		{
			get
			{
				return this._productGroupTbl.Entity;
			}
			set
			{
				productGroupTbl previousValue = this._productGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._productGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productGroupTbl.Entity = null;
						previousValue.ngo_product_productGroupTbls.Remove(this);
					}
					this._productGroupTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_product_productGroupTbls.Add(this);
						this._productGroupId = value.Id;
					}
					else
					{
						this._productGroupId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_ngo_product_productGroupTbl", Storage="_productTbl", ThisKey="productId", OtherKey="Id", IsForeignKey=true)]
		public productTbl productTbl
		{
			get
			{
				return this._productTbl.Entity;
			}
			set
			{
				productTbl previousValue = this._productTbl.Entity;
				if (((previousValue != value) 
							|| (this._productTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productTbl.Entity = null;
						previousValue.ngo_product_productGroupTbls.Remove(this);
					}
					this._productTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_product_productGroupTbls.Add(this);
						this._productId = value.Id;
					}
					else
					{
						this._productId = default(Nullable<long>);
					}
					this.SendPropertyChanged("productTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ngo_productTbl")]
	public partial class ngo_productTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ngoId;
		
		private long _productCategoryId;
		
		private byte _status;
		
		private EntityRef<ngoTbl> _ngoTbl;
		
		private EntityRef<productCategoryTbl> _productCategoryTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnngoIdChanging(long value);
    partial void OnngoIdChanged();
    partial void OnproductCategoryIdChanging(long value);
    partial void OnproductCategoryIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public ngo_productTbl()
		{
			this._ngoTbl = default(EntityRef<ngoTbl>);
			this._productCategoryTbl = default(EntityRef<productCategoryTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ngoId", DbType="BigInt NOT NULL")]
		public long ngoId
		{
			get
			{
				return this._ngoId;
			}
			set
			{
				if ((this._ngoId != value))
				{
					if (this._ngoTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnngoIdChanging(value);
					this.SendPropertyChanging();
					this._ngoId = value;
					this.SendPropertyChanged("ngoId");
					this.OnngoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCategoryId", DbType="BigInt NOT NULL")]
		public long productCategoryId
		{
			get
			{
				return this._productCategoryId;
			}
			set
			{
				if ((this._productCategoryId != value))
				{
					if (this._productCategoryTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._productCategoryId = value;
					this.SendPropertyChanged("productCategoryId");
					this.OnproductCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ngoTbl_ngo_productTbl", Storage="_ngoTbl", ThisKey="ngoId", OtherKey="Id", IsForeignKey=true)]
		public ngoTbl ngoTbl
		{
			get
			{
				return this._ngoTbl.Entity;
			}
			set
			{
				ngoTbl previousValue = this._ngoTbl.Entity;
				if (((previousValue != value) 
							|| (this._ngoTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ngoTbl.Entity = null;
						previousValue.ngo_productTbls.Remove(this);
					}
					this._ngoTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_productTbls.Add(this);
						this._ngoId = value.Id;
					}
					else
					{
						this._ngoId = default(long);
					}
					this.SendPropertyChanged("ngoTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_ngo_productTbl", Storage="_productCategoryTbl", ThisKey="productCategoryId", OtherKey="Id", IsForeignKey=true)]
		public productCategoryTbl productCategoryTbl
		{
			get
			{
				return this._productCategoryTbl.Entity;
			}
			set
			{
				productCategoryTbl previousValue = this._productCategoryTbl.Entity;
				if (((previousValue != value) 
							|| (this._productCategoryTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productCategoryTbl.Entity = null;
						previousValue.ngo_productTbls.Remove(this);
					}
					this._productCategoryTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_productTbls.Add(this);
						this._productCategoryId = value.Id;
					}
					else
					{
						this._productCategoryId = default(long);
					}
					this.SendPropertyChanged("productCategoryTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ngo_serviceTbl")]
	public partial class ngo_serviceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ngoId;
		
		private long _serviceId;
		
		private byte _status;
		
		private EntityRef<ngoTbl> _ngoTbl;
		
		private EntityRef<serviceTbl> _serviceTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnngoIdChanging(long value);
    partial void OnngoIdChanged();
    partial void OnserviceIdChanging(long value);
    partial void OnserviceIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public ngo_serviceTbl()
		{
			this._ngoTbl = default(EntityRef<ngoTbl>);
			this._serviceTbl = default(EntityRef<serviceTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ngoId", DbType="BigInt NOT NULL")]
		public long ngoId
		{
			get
			{
				return this._ngoId;
			}
			set
			{
				if ((this._ngoId != value))
				{
					if (this._ngoTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnngoIdChanging(value);
					this.SendPropertyChanging();
					this._ngoId = value;
					this.SendPropertyChanged("ngoId");
					this.OnngoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceId", DbType="BigInt NOT NULL")]
		public long serviceId
		{
			get
			{
				return this._serviceId;
			}
			set
			{
				if ((this._serviceId != value))
				{
					if (this._serviceTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceIdChanging(value);
					this.SendPropertyChanging();
					this._serviceId = value;
					this.SendPropertyChanged("serviceId");
					this.OnserviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ngoTbl_ngo_serviceTbl", Storage="_ngoTbl", ThisKey="ngoId", OtherKey="Id", IsForeignKey=true)]
		public ngoTbl ngoTbl
		{
			get
			{
				return this._ngoTbl.Entity;
			}
			set
			{
				ngoTbl previousValue = this._ngoTbl.Entity;
				if (((previousValue != value) 
							|| (this._ngoTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ngoTbl.Entity = null;
						previousValue.ngo_serviceTbls.Remove(this);
					}
					this._ngoTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_serviceTbls.Add(this);
						this._ngoId = value.Id;
					}
					else
					{
						this._ngoId = default(long);
					}
					this.SendPropertyChanged("ngoTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_ngo_serviceTbl", Storage="_serviceTbl", ThisKey="serviceId", OtherKey="Id", IsForeignKey=true)]
		public serviceTbl serviceTbl
		{
			get
			{
				return this._serviceTbl.Entity;
			}
			set
			{
				serviceTbl previousValue = this._serviceTbl.Entity;
				if (((previousValue != value) 
							|| (this._serviceTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceTbl.Entity = null;
						previousValue.ngo_serviceTbls.Remove(this);
					}
					this._serviceTbl.Entity = value;
					if ((value != null))
					{
						value.ngo_serviceTbls.Add(this);
						this._serviceId = value.Id;
					}
					else
					{
						this._serviceId = default(long);
					}
					this.SendPropertyChanged("serviceTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ngoTbl")]
	public partial class ngoTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _ngoName;
		
		private string _companyRegisterationNumber;
		
		private string _phoneNumber;
		
		private string _fax;
		
		private string _workScope;
		
		private long _cityId;
		
		private bool _isAdvisible;
		
		private System.Data.Linq.Binary _imgSignature;
		
		private string _imgSignatureFileType;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntitySet<ngo_product_productGroupTbl> _ngo_product_productGroupTbls;
		
		private EntitySet<ngo_productTbl> _ngo_productTbls;
		
		private EntitySet<ngo_serviceTbl> _ngo_serviceTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnngoNameChanging(string value);
    partial void OnngoNameChanged();
    partial void OncompanyRegisterationNumberChanging(string value);
    partial void OncompanyRegisterationNumberChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void OnworkScopeChanging(string value);
    partial void OnworkScopeChanged();
    partial void OncityIdChanging(long value);
    partial void OncityIdChanged();
    partial void OnisAdvisibleChanging(bool value);
    partial void OnisAdvisibleChanged();
    partial void OnimgSignatureChanging(System.Data.Linq.Binary value);
    partial void OnimgSignatureChanged();
    partial void OnimgSignatureFileTypeChanging(string value);
    partial void OnimgSignatureFileTypeChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public ngoTbl()
		{
			this._ngo_product_productGroupTbls = new EntitySet<ngo_product_productGroupTbl>(new Action<ngo_product_productGroupTbl>(this.attach_ngo_product_productGroupTbls), new Action<ngo_product_productGroupTbl>(this.detach_ngo_product_productGroupTbls));
			this._ngo_productTbls = new EntitySet<ngo_productTbl>(new Action<ngo_productTbl>(this.attach_ngo_productTbls), new Action<ngo_productTbl>(this.detach_ngo_productTbls));
			this._ngo_serviceTbls = new EntitySet<ngo_serviceTbl>(new Action<ngo_serviceTbl>(this.attach_ngo_serviceTbls), new Action<ngo_serviceTbl>(this.detach_ngo_serviceTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ngoName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ngoName
		{
			get
			{
				return this._ngoName;
			}
			set
			{
				if ((this._ngoName != value))
				{
					this.OnngoNameChanging(value);
					this.SendPropertyChanging();
					this._ngoName = value;
					this.SendPropertyChanged("ngoName");
					this.OnngoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyRegisterationNumber", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string companyRegisterationNumber
		{
			get
			{
				return this._companyRegisterationNumber;
			}
			set
			{
				if ((this._companyRegisterationNumber != value))
				{
					this.OncompanyRegisterationNumberChanging(value);
					this.SendPropertyChanging();
					this._companyRegisterationNumber = value;
					this.SendPropertyChanged("companyRegisterationNumber");
					this.OncompanyRegisterationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="NChar(11)")]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workScope", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string workScope
		{
			get
			{
				return this._workScope;
			}
			set
			{
				if ((this._workScope != value))
				{
					this.OnworkScopeChanging(value);
					this.SendPropertyChanging();
					this._workScope = value;
					this.SendPropertyChanged("workScope");
					this.OnworkScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityId", DbType="BigInt NOT NULL")]
		public long cityId
		{
			get
			{
				return this._cityId;
			}
			set
			{
				if ((this._cityId != value))
				{
					this.OncityIdChanging(value);
					this.SendPropertyChanging();
					this._cityId = value;
					this.SendPropertyChanged("cityId");
					this.OncityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdvisible", DbType="Bit NOT NULL")]
		public bool isAdvisible
		{
			get
			{
				return this._isAdvisible;
			}
			set
			{
				if ((this._isAdvisible != value))
				{
					this.OnisAdvisibleChanging(value);
					this.SendPropertyChanging();
					this._isAdvisible = value;
					this.SendPropertyChanged("isAdvisible");
					this.OnisAdvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgSignature", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imgSignature
		{
			get
			{
				return this._imgSignature;
			}
			set
			{
				if ((this._imgSignature != value))
				{
					this.OnimgSignatureChanging(value);
					this.SendPropertyChanging();
					this._imgSignature = value;
					this.SendPropertyChanged("imgSignature");
					this.OnimgSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgSignatureFileType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imgSignatureFileType
		{
			get
			{
				return this._imgSignatureFileType;
			}
			set
			{
				if ((this._imgSignatureFileType != value))
				{
					this.OnimgSignatureFileTypeChanging(value);
					this.SendPropertyChanging();
					this._imgSignatureFileType = value;
					this.SendPropertyChanged("imgSignatureFileType");
					this.OnimgSignatureFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ngoTbl_ngo_product_productGroupTbl", Storage="_ngo_product_productGroupTbls", ThisKey="Id", OtherKey="ngoId")]
		public EntitySet<ngo_product_productGroupTbl> ngo_product_productGroupTbls
		{
			get
			{
				return this._ngo_product_productGroupTbls;
			}
			set
			{
				this._ngo_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ngoTbl_ngo_productTbl", Storage="_ngo_productTbls", ThisKey="Id", OtherKey="ngoId")]
		public EntitySet<ngo_productTbl> ngo_productTbls
		{
			get
			{
				return this._ngo_productTbls;
			}
			set
			{
				this._ngo_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ngoTbl_ngo_serviceTbl", Storage="_ngo_serviceTbls", ThisKey="Id", OtherKey="ngoId")]
		public EntitySet<ngo_serviceTbl> ngo_serviceTbls
		{
			get
			{
				return this._ngo_serviceTbls;
			}
			set
			{
				this._ngo_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_ngoTbl", Storage="_userTbl", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.ngoTbl = null;
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.ngoTbl = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ngo_product_productGroupTbls(ngo_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.ngoTbl = this;
		}
		
		private void detach_ngo_product_productGroupTbls(ngo_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.ngoTbl = null;
		}
		
		private void attach_ngo_productTbls(ngo_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.ngoTbl = this;
		}
		
		private void detach_ngo_productTbls(ngo_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.ngoTbl = null;
		}
		
		private void attach_ngo_serviceTbls(ngo_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.ngoTbl = this;
		}
		
		private void detach_ngo_serviceTbls(ngo_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.ngoTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.orderTbl")]
	public partial class orderTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _code;
		
		private long _userId;
		
		private long _packageId;
		
		private byte _payStatus;
		
		private string _cancelReason;
		
		private System.Nullable<long> _cancelerId;
		
		private double _latitude;
		
		private double _longitude;
		
		private string _addressTitle;
		
		private int _houseNumber;
		
		private System.Nullable<int> _houseUnit;
		
		private double _discount;
		
		private double _priceWithDiscount;
		
		private double _price;
		
		private string _userName;
		
		private string _userFamily;
		
		private string _userMobile;
		
		private System.DateTime _registerDate;
		
		private System.Nullable<System.DateTime> _cancelDate;
		
		private EntitySet<walletTbl> _walletTbls;
		
		private EntityRef<packageTbl> _packageTbl;
		
		private EntityRef<userTbl> _userTbl;
		
		private EntityRef<userTbl> _userTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnpackageIdChanging(long value);
    partial void OnpackageIdChanged();
    partial void OnpayStatusChanging(byte value);
    partial void OnpayStatusChanged();
    partial void OncancelReasonChanging(string value);
    partial void OncancelReasonChanged();
    partial void OncancelerIdChanging(System.Nullable<long> value);
    partial void OncancelerIdChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    partial void OnaddressTitleChanging(string value);
    partial void OnaddressTitleChanged();
    partial void OnhouseNumberChanging(int value);
    partial void OnhouseNumberChanged();
    partial void OnhouseUnitChanging(System.Nullable<int> value);
    partial void OnhouseUnitChanged();
    partial void OndiscountChanging(double value);
    partial void OndiscountChanged();
    partial void OnpriceWithDiscountChanging(double value);
    partial void OnpriceWithDiscountChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserFamilyChanging(string value);
    partial void OnuserFamilyChanged();
    partial void OnuserMobileChanging(string value);
    partial void OnuserMobileChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OncancelDateChanging(System.Nullable<System.DateTime> value);
    partial void OncancelDateChanged();
    #endregion
		
		public orderTbl()
		{
			this._walletTbls = new EntitySet<walletTbl>(new Action<walletTbl>(this.attach_walletTbls), new Action<walletTbl>(this.detach_walletTbls));
			this._packageTbl = default(EntityRef<packageTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			this._userTbl1 = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_packageId", DbType="BigInt NOT NULL")]
		public long packageId
		{
			get
			{
				return this._packageId;
			}
			set
			{
				if ((this._packageId != value))
				{
					if (this._packageTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpackageIdChanging(value);
					this.SendPropertyChanging();
					this._packageId = value;
					this.SendPropertyChanged("packageId");
					this.OnpackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payStatus", DbType="TinyInt NOT NULL")]
		public byte payStatus
		{
			get
			{
				return this._payStatus;
			}
			set
			{
				if ((this._payStatus != value))
				{
					this.OnpayStatusChanging(value);
					this.SendPropertyChanging();
					this._payStatus = value;
					this.SendPropertyChanged("payStatus");
					this.OnpayStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cancelReason", DbType="NVarChar(200)")]
		public string cancelReason
		{
			get
			{
				return this._cancelReason;
			}
			set
			{
				if ((this._cancelReason != value))
				{
					this.OncancelReasonChanging(value);
					this.SendPropertyChanging();
					this._cancelReason = value;
					this.SendPropertyChanged("cancelReason");
					this.OncancelReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cancelerId", DbType="BigInt")]
		public System.Nullable<long> cancelerId
		{
			get
			{
				return this._cancelerId;
			}
			set
			{
				if ((this._cancelerId != value))
				{
					if (this._userTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncancelerIdChanging(value);
					this.SendPropertyChanging();
					this._cancelerId = value;
					this.SendPropertyChanged("cancelerId");
					this.OncancelerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressTitle", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string addressTitle
		{
			get
			{
				return this._addressTitle;
			}
			set
			{
				if ((this._addressTitle != value))
				{
					this.OnaddressTitleChanging(value);
					this.SendPropertyChanging();
					this._addressTitle = value;
					this.SendPropertyChanged("addressTitle");
					this.OnaddressTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_houseNumber", DbType="Int NOT NULL")]
		public int houseNumber
		{
			get
			{
				return this._houseNumber;
			}
			set
			{
				if ((this._houseNumber != value))
				{
					this.OnhouseNumberChanging(value);
					this.SendPropertyChanging();
					this._houseNumber = value;
					this.SendPropertyChanged("houseNumber");
					this.OnhouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_houseUnit", DbType="Int")]
		public System.Nullable<int> houseUnit
		{
			get
			{
				return this._houseUnit;
			}
			set
			{
				if ((this._houseUnit != value))
				{
					this.OnhouseUnitChanging(value);
					this.SendPropertyChanging();
					this._houseUnit = value;
					this.SendPropertyChanged("houseUnit");
					this.OnhouseUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discount", DbType="Float NOT NULL")]
		public double discount
		{
			get
			{
				return this._discount;
			}
			set
			{
				if ((this._discount != value))
				{
					this.OndiscountChanging(value);
					this.SendPropertyChanging();
					this._discount = value;
					this.SendPropertyChanged("discount");
					this.OndiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceWithDiscount", DbType="Float NOT NULL")]
		public double priceWithDiscount
		{
			get
			{
				return this._priceWithDiscount;
			}
			set
			{
				if ((this._priceWithDiscount != value))
				{
					this.OnpriceWithDiscountChanging(value);
					this.SendPropertyChanging();
					this._priceWithDiscount = value;
					this.SendPropertyChanged("priceWithDiscount");
					this.OnpriceWithDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userFamily", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string userFamily
		{
			get
			{
				return this._userFamily;
			}
			set
			{
				if ((this._userFamily != value))
				{
					this.OnuserFamilyChanging(value);
					this.SendPropertyChanging();
					this._userFamily = value;
					this.SendPropertyChanged("userFamily");
					this.OnuserFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userMobile", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string userMobile
		{
			get
			{
				return this._userMobile;
			}
			set
			{
				if ((this._userMobile != value))
				{
					this.OnuserMobileChanging(value);
					this.SendPropertyChanging();
					this._userMobile = value;
					this.SendPropertyChanged("userMobile");
					this.OnuserMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cancelDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> cancelDate
		{
			get
			{
				return this._cancelDate;
			}
			set
			{
				if ((this._cancelDate != value))
				{
					this.OncancelDateChanging(value);
					this.SendPropertyChanging();
					this._cancelDate = value;
					this.SendPropertyChanged("cancelDate");
					this.OncancelDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="orderTbl_walletTbl", Storage="_walletTbls", ThisKey="Id", OtherKey="orderId")]
		public EntitySet<walletTbl> walletTbls
		{
			get
			{
				return this._walletTbls;
			}
			set
			{
				this._walletTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="packageTbl_orderTbl", Storage="_packageTbl", ThisKey="packageId", OtherKey="Id", IsForeignKey=true)]
		public packageTbl packageTbl
		{
			get
			{
				return this._packageTbl.Entity;
			}
			set
			{
				packageTbl previousValue = this._packageTbl.Entity;
				if (((previousValue != value) 
							|| (this._packageTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._packageTbl.Entity = null;
						previousValue.orderTbls.Remove(this);
					}
					this._packageTbl.Entity = value;
					if ((value != null))
					{
						value.orderTbls.Add(this);
						this._packageId = value.Id;
					}
					else
					{
						this._packageId = default(long);
					}
					this.SendPropertyChanged("packageTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_orderTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.orderTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.orderTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_orderTbl1", Storage="_userTbl1", ThisKey="cancelerId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl1
		{
			get
			{
				return this._userTbl1.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl1.Entity;
				if (((previousValue != value) 
							|| (this._userTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl1.Entity = null;
						previousValue.orderTbls1.Remove(this);
					}
					this._userTbl1.Entity = value;
					if ((value != null))
					{
						value.orderTbls1.Add(this);
						this._cancelerId = value.Id;
					}
					else
					{
						this._cancelerId = default(Nullable<long>);
					}
					this.SendPropertyChanged("userTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_walletTbls(walletTbl entity)
		{
			this.SendPropertyChanging();
			entity.orderTbl = this;
		}
		
		private void detach_walletTbls(walletTbl entity)
		{
			this.SendPropertyChanging();
			entity.orderTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.packageTbl")]
	public partial class packageTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private long _RoleId;
		
		private string _fileType;
		
		private System.Data.Linq.Binary _value;
		
		private string _description;
		
		private double _price;
		
		private double _discount;
		
		private double _tax;
		
		private byte _status;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntitySet<orderTbl> _orderTbls;
		
		private EntityRef<roleTbl> _roleTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnRoleIdChanging(long value);
    partial void OnRoleIdChanged();
    partial void OnfileTypeChanging(string value);
    partial void OnfileTypeChanged();
    partial void OnvalueChanging(System.Data.Linq.Binary value);
    partial void OnvalueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OndiscountChanging(double value);
    partial void OndiscountChanged();
    partial void OntaxChanging(double value);
    partial void OntaxChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public packageTbl()
		{
			this._orderTbls = new EntitySet<orderTbl>(new Action<orderTbl>(this.attach_orderTbls), new Action<orderTbl>(this.detach_orderTbls));
			this._roleTbl = default(EntityRef<roleTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="BigInt NOT NULL")]
		public long RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._roleTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileType", DbType="NVarChar(50)")]
		public string fileType
		{
			get
			{
				return this._fileType;
			}
			set
			{
				if ((this._fileType != value))
				{
					this.OnfileTypeChanging(value);
					this.SendPropertyChanging();
					this._fileType = value;
					this.SendPropertyChanged("fileType");
					this.OnfileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discount", DbType="Float NOT NULL")]
		public double discount
		{
			get
			{
				return this._discount;
			}
			set
			{
				if ((this._discount != value))
				{
					this.OndiscountChanging(value);
					this.SendPropertyChanging();
					this._discount = value;
					this.SendPropertyChanged("discount");
					this.OndiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tax", DbType="Float NOT NULL")]
		public double tax
		{
			get
			{
				return this._tax;
			}
			set
			{
				if ((this._tax != value))
				{
					this.OntaxChanging(value);
					this.SendPropertyChanging();
					this._tax = value;
					this.SendPropertyChanged("tax");
					this.OntaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="packageTbl_orderTbl", Storage="_orderTbls", ThisKey="Id", OtherKey="packageId")]
		public EntitySet<orderTbl> orderTbls
		{
			get
			{
				return this._orderTbls;
			}
			set
			{
				this._orderTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_packageTbl", Storage="_roleTbl", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public roleTbl roleTbl
		{
			get
			{
				return this._roleTbl.Entity;
			}
			set
			{
				roleTbl previousValue = this._roleTbl.Entity;
				if (((previousValue != value) 
							|| (this._roleTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._roleTbl.Entity = null;
						previousValue.packageTbls.Remove(this);
					}
					this._roleTbl.Entity = value;
					if ((value != null))
					{
						value.packageTbls.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(long);
					}
					this.SendPropertyChanged("roleTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_packageTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.packageTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.packageTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orderTbls(orderTbl entity)
		{
			this.SendPropertyChanging();
			entity.packageTbl = this;
		}
		
		private void detach_orderTbls(orderTbl entity)
		{
			this.SendPropertyChanging();
			entity.packageTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.patient_doctorTbl")]
	public partial class patient_doctorTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _patientId;
		
		private long _doctorId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<doctorTbl> _doctorTbl;
		
		private EntityRef<patientTbl> _patientTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnpatientIdChanging(long value);
    partial void OnpatientIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public patient_doctorTbl()
		{
			this._doctorTbl = default(EntityRef<doctorTbl>);
			this._patientTbl = default(EntityRef<patientTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientId", DbType="BigInt NOT NULL")]
		public long patientId
		{
			get
			{
				return this._patientId;
			}
			set
			{
				if ((this._patientId != value))
				{
					if (this._patientTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIdChanging(value);
					this.SendPropertyChanging();
					this._patientId = value;
					this.SendPropertyChanged("patientId");
					this.OnpatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._doctorTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctorTbl_patient_doctorTbl", Storage="_doctorTbl", ThisKey="doctorId", OtherKey="Id", IsForeignKey=true)]
		public doctorTbl doctorTbl
		{
			get
			{
				return this._doctorTbl.Entity;
			}
			set
			{
				doctorTbl previousValue = this._doctorTbl.Entity;
				if (((previousValue != value) 
							|| (this._doctorTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctorTbl.Entity = null;
						previousValue.patient_doctorTbls.Remove(this);
					}
					this._doctorTbl.Entity = value;
					if ((value != null))
					{
						value.patient_doctorTbls.Add(this);
						this._doctorId = value.Id;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("doctorTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="patientTbl_patient_doctorTbl", Storage="_patientTbl", ThisKey="patientId", OtherKey="Id", IsForeignKey=true)]
		public patientTbl patientTbl
		{
			get
			{
				return this._patientTbl.Entity;
			}
			set
			{
				patientTbl previousValue = this._patientTbl.Entity;
				if (((previousValue != value) 
							|| (this._patientTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._patientTbl.Entity = null;
						previousValue.patient_doctorTbls.Remove(this);
					}
					this._patientTbl.Entity = value;
					if ((value != null))
					{
						value.patient_doctorTbls.Add(this);
						this._patientId = value.Id;
					}
					else
					{
						this._patientId = default(long);
					}
					this.SendPropertyChanged("patientTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.patient_insuranceTbl")]
	public partial class patient_insuranceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _patientId;
		
		private long _insuranceId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<insuranceTbl> _insuranceTbl;
		
		private EntityRef<patientTbl> _patientTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnpatientIdChanging(long value);
    partial void OnpatientIdChanged();
    partial void OninsuranceIdChanging(long value);
    partial void OninsuranceIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public patient_insuranceTbl()
		{
			this._insuranceTbl = default(EntityRef<insuranceTbl>);
			this._patientTbl = default(EntityRef<patientTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientId", DbType="BigInt NOT NULL")]
		public long patientId
		{
			get
			{
				return this._patientId;
			}
			set
			{
				if ((this._patientId != value))
				{
					if (this._patientTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIdChanging(value);
					this.SendPropertyChanging();
					this._patientId = value;
					this.SendPropertyChanged("patientId");
					this.OnpatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_insuranceId", DbType="BigInt NOT NULL")]
		public long insuranceId
		{
			get
			{
				return this._insuranceId;
			}
			set
			{
				if ((this._insuranceId != value))
				{
					if (this._insuranceTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninsuranceIdChanging(value);
					this.SendPropertyChanging();
					this._insuranceId = value;
					this.SendPropertyChanged("insuranceId");
					this.OninsuranceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="insuranceTbl_patient_insuranceTbl", Storage="_insuranceTbl", ThisKey="insuranceId", OtherKey="Id", IsForeignKey=true)]
		public insuranceTbl insuranceTbl
		{
			get
			{
				return this._insuranceTbl.Entity;
			}
			set
			{
				insuranceTbl previousValue = this._insuranceTbl.Entity;
				if (((previousValue != value) 
							|| (this._insuranceTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._insuranceTbl.Entity = null;
						previousValue.patient_insuranceTbls.Remove(this);
					}
					this._insuranceTbl.Entity = value;
					if ((value != null))
					{
						value.patient_insuranceTbls.Add(this);
						this._insuranceId = value.Id;
					}
					else
					{
						this._insuranceId = default(long);
					}
					this.SendPropertyChanged("insuranceTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="patientTbl_patient_insuranceTbl", Storage="_patientTbl", ThisKey="patientId", OtherKey="Id", IsForeignKey=true)]
		public patientTbl patientTbl
		{
			get
			{
				return this._patientTbl.Entity;
			}
			set
			{
				patientTbl previousValue = this._patientTbl.Entity;
				if (((previousValue != value) 
							|| (this._patientTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._patientTbl.Entity = null;
						previousValue.patient_insuranceTbls.Remove(this);
					}
					this._patientTbl.Entity = value;
					if ((value != null))
					{
						value.patient_insuranceTbls.Add(this);
						this._patientId = value.Id;
					}
					else
					{
						this._patientId = default(long);
					}
					this.SendPropertyChanged("patientTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.patientTbl")]
	public partial class patientTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _family;
		
		private string _fatherName;
		
		private string _nationalCode;
		
		private System.DateTime _birthDate;
		
		private string _birthPlace;
		
		private string _ExportCity;
		
		private string _IdentityCode;
		
		private bool _isPatient;
		
		private string _passportCode;
		
		private bool _isMarried;
		
		private bool _gender;
		
		private bool _isHeadFamily;
		
		private int _countFamily;
		
		private long _educationId;
		
		private string _studyField;
		
		private bool _isStudent;
		
		private bool _isInsurance;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<patient_doctorTbl> _patient_doctorTbls;
		
		private EntitySet<patient_insuranceTbl> _patient_insuranceTbls;
		
		private EntityRef<educationTbl> _educationTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfamilyChanging(string value);
    partial void OnfamilyChanged();
    partial void OnfatherNameChanging(string value);
    partial void OnfatherNameChanged();
    partial void OnnationalCodeChanging(string value);
    partial void OnnationalCodeChanged();
    partial void OnbirthDateChanging(System.DateTime value);
    partial void OnbirthDateChanged();
    partial void OnbirthPlaceChanging(string value);
    partial void OnbirthPlaceChanged();
    partial void OnExportCityChanging(string value);
    partial void OnExportCityChanged();
    partial void OnIdentityCodeChanging(string value);
    partial void OnIdentityCodeChanged();
    partial void OnisPatientChanging(bool value);
    partial void OnisPatientChanged();
    partial void OnpassportCodeChanging(string value);
    partial void OnpassportCodeChanged();
    partial void OnisMarriedChanging(bool value);
    partial void OnisMarriedChanged();
    partial void OngenderChanging(bool value);
    partial void OngenderChanged();
    partial void OnisHeadFamilyChanging(bool value);
    partial void OnisHeadFamilyChanged();
    partial void OncountFamilyChanging(int value);
    partial void OncountFamilyChanged();
    partial void OneducationIdChanging(long value);
    partial void OneducationIdChanged();
    partial void OnstudyFieldChanging(string value);
    partial void OnstudyFieldChanged();
    partial void OnisStudentChanging(bool value);
    partial void OnisStudentChanged();
    partial void OnisInsuranceChanging(bool value);
    partial void OnisInsuranceChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public patientTbl()
		{
			this._patient_doctorTbls = new EntitySet<patient_doctorTbl>(new Action<patient_doctorTbl>(this.attach_patient_doctorTbls), new Action<patient_doctorTbl>(this.detach_patient_doctorTbls));
			this._patient_insuranceTbls = new EntitySet<patient_insuranceTbl>(new Action<patient_insuranceTbl>(this.attach_patient_insuranceTbls), new Action<patient_insuranceTbl>(this.detach_patient_insuranceTbls));
			this._educationTbl = default(EntityRef<educationTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_family", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string family
		{
			get
			{
				return this._family;
			}
			set
			{
				if ((this._family != value))
				{
					this.OnfamilyChanging(value);
					this.SendPropertyChanging();
					this._family = value;
					this.SendPropertyChanged("family");
					this.OnfamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fatherName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string fatherName
		{
			get
			{
				return this._fatherName;
			}
			set
			{
				if ((this._fatherName != value))
				{
					this.OnfatherNameChanging(value);
					this.SendPropertyChanging();
					this._fatherName = value;
					this.SendPropertyChanged("fatherName");
					this.OnfatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationalCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string nationalCode
		{
			get
			{
				return this._nationalCode;
			}
			set
			{
				if ((this._nationalCode != value))
				{
					this.OnnationalCodeChanging(value);
					this.SendPropertyChanging();
					this._nationalCode = value;
					this.SendPropertyChanged("nationalCode");
					this.OnnationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthDate", DbType="Date NOT NULL")]
		public System.DateTime birthDate
		{
			get
			{
				return this._birthDate;
			}
			set
			{
				if ((this._birthDate != value))
				{
					this.OnbirthDateChanging(value);
					this.SendPropertyChanging();
					this._birthDate = value;
					this.SendPropertyChanged("birthDate");
					this.OnbirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthPlace", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string birthPlace
		{
			get
			{
				return this._birthPlace;
			}
			set
			{
				if ((this._birthPlace != value))
				{
					this.OnbirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._birthPlace = value;
					this.SendPropertyChanged("birthPlace");
					this.OnbirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExportCity", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ExportCity
		{
			get
			{
				return this._ExportCity;
			}
			set
			{
				if ((this._ExportCity != value))
				{
					this.OnExportCityChanging(value);
					this.SendPropertyChanging();
					this._ExportCity = value;
					this.SendPropertyChanged("ExportCity");
					this.OnExportCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string IdentityCode
		{
			get
			{
				return this._IdentityCode;
			}
			set
			{
				if ((this._IdentityCode != value))
				{
					this.OnIdentityCodeChanging(value);
					this.SendPropertyChanging();
					this._IdentityCode = value;
					this.SendPropertyChanged("IdentityCode");
					this.OnIdentityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPatient", DbType="Bit NOT NULL")]
		public bool isPatient
		{
			get
			{
				return this._isPatient;
			}
			set
			{
				if ((this._isPatient != value))
				{
					this.OnisPatientChanging(value);
					this.SendPropertyChanging();
					this._isPatient = value;
					this.SendPropertyChanged("isPatient");
					this.OnisPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passportCode", DbType="Char(8)")]
		public string passportCode
		{
			get
			{
				return this._passportCode;
			}
			set
			{
				if ((this._passportCode != value))
				{
					this.OnpassportCodeChanging(value);
					this.SendPropertyChanging();
					this._passportCode = value;
					this.SendPropertyChanged("passportCode");
					this.OnpassportCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMarried", DbType="Bit NOT NULL")]
		public bool isMarried
		{
			get
			{
				return this._isMarried;
			}
			set
			{
				if ((this._isMarried != value))
				{
					this.OnisMarriedChanging(value);
					this.SendPropertyChanging();
					this._isMarried = value;
					this.SendPropertyChanged("isMarried");
					this.OnisMarriedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Bit NOT NULL")]
		public bool gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHeadFamily", DbType="Bit NOT NULL")]
		public bool isHeadFamily
		{
			get
			{
				return this._isHeadFamily;
			}
			set
			{
				if ((this._isHeadFamily != value))
				{
					this.OnisHeadFamilyChanging(value);
					this.SendPropertyChanging();
					this._isHeadFamily = value;
					this.SendPropertyChanged("isHeadFamily");
					this.OnisHeadFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countFamily", DbType="Int NOT NULL")]
		public int countFamily
		{
			get
			{
				return this._countFamily;
			}
			set
			{
				if ((this._countFamily != value))
				{
					this.OncountFamilyChanging(value);
					this.SendPropertyChanging();
					this._countFamily = value;
					this.SendPropertyChanged("countFamily");
					this.OncountFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_educationId", DbType="BigInt NOT NULL")]
		public long educationId
		{
			get
			{
				return this._educationId;
			}
			set
			{
				if ((this._educationId != value))
				{
					if (this._educationTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneducationIdChanging(value);
					this.SendPropertyChanging();
					this._educationId = value;
					this.SendPropertyChanged("educationId");
					this.OneducationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studyField", DbType="NVarChar(200)")]
		public string studyField
		{
			get
			{
				return this._studyField;
			}
			set
			{
				if ((this._studyField != value))
				{
					this.OnstudyFieldChanging(value);
					this.SendPropertyChanging();
					this._studyField = value;
					this.SendPropertyChanged("studyField");
					this.OnstudyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isStudent", DbType="Bit NOT NULL")]
		public bool isStudent
		{
			get
			{
				return this._isStudent;
			}
			set
			{
				if ((this._isStudent != value))
				{
					this.OnisStudentChanging(value);
					this.SendPropertyChanging();
					this._isStudent = value;
					this.SendPropertyChanged("isStudent");
					this.OnisStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isInsurance", DbType="Bit NOT NULL")]
		public bool isInsurance
		{
			get
			{
				return this._isInsurance;
			}
			set
			{
				if ((this._isInsurance != value))
				{
					this.OnisInsuranceChanging(value);
					this.SendPropertyChanging();
					this._isInsurance = value;
					this.SendPropertyChanged("isInsurance");
					this.OnisInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="patientTbl_patient_doctorTbl", Storage="_patient_doctorTbls", ThisKey="Id", OtherKey="patientId")]
		public EntitySet<patient_doctorTbl> patient_doctorTbls
		{
			get
			{
				return this._patient_doctorTbls;
			}
			set
			{
				this._patient_doctorTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="patientTbl_patient_insuranceTbl", Storage="_patient_insuranceTbls", ThisKey="Id", OtherKey="patientId")]
		public EntitySet<patient_insuranceTbl> patient_insuranceTbls
		{
			get
			{
				return this._patient_insuranceTbls;
			}
			set
			{
				this._patient_insuranceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="educationTbl_patientTbl", Storage="_educationTbl", ThisKey="educationId", OtherKey="Id", IsForeignKey=true)]
		public educationTbl educationTbl
		{
			get
			{
				return this._educationTbl.Entity;
			}
			set
			{
				educationTbl previousValue = this._educationTbl.Entity;
				if (((previousValue != value) 
							|| (this._educationTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._educationTbl.Entity = null;
						previousValue.patientTbls.Remove(this);
					}
					this._educationTbl.Entity = value;
					if ((value != null))
					{
						value.patientTbls.Add(this);
						this._educationId = value.Id;
					}
					else
					{
						this._educationId = default(long);
					}
					this.SendPropertyChanged("educationTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_patientTbl", Storage="_userTbl", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.patientTbl = null;
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.patientTbl = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_patient_doctorTbls(patient_doctorTbl entity)
		{
			this.SendPropertyChanging();
			entity.patientTbl = this;
		}
		
		private void detach_patient_doctorTbls(patient_doctorTbl entity)
		{
			this.SendPropertyChanging();
			entity.patientTbl = null;
		}
		
		private void attach_patient_insuranceTbls(patient_insuranceTbl entity)
		{
			this.SendPropertyChanging();
			entity.patientTbl = this;
		}
		
		private void detach_patient_insuranceTbls(patient_insuranceTbl entity)
		{
			this.SendPropertyChanging();
			entity.patientTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.paymentTbl")]
	public partial class paymentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _userId;
		
		private string _status;
		
		private string _refId;
		
		private string _authority;
		
		private System.DateTime _registerDate;
		
		private int _price;
		
		private string _userName;
		
		private string _userFamily;
		
		private string _userMobile;
		
		private EntitySet<walletTbl> _walletTbls;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnrefIdChanging(string value);
    partial void OnrefIdChanged();
    partial void OnauthorityChanging(string value);
    partial void OnauthorityChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserFamilyChanging(string value);
    partial void OnuserFamilyChanged();
    partial void OnuserMobileChanging(string value);
    partial void OnuserMobileChanged();
    #endregion
		
		public paymentTbl()
		{
			this._walletTbls = new EntitySet<walletTbl>(new Action<walletTbl>(this.attach_walletTbls), new Action<walletTbl>(this.detach_walletTbls));
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refId", DbType="NVarChar(150)")]
		public string refId
		{
			get
			{
				return this._refId;
			}
			set
			{
				if ((this._refId != value))
				{
					this.OnrefIdChanging(value);
					this.SendPropertyChanging();
					this._refId = value;
					this.SendPropertyChanged("refId");
					this.OnrefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authority", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string authority
		{
			get
			{
				return this._authority;
			}
			set
			{
				if ((this._authority != value))
				{
					this.OnauthorityChanging(value);
					this.SendPropertyChanging();
					this._authority = value;
					this.SendPropertyChanged("authority");
					this.OnauthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userFamily", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string userFamily
		{
			get
			{
				return this._userFamily;
			}
			set
			{
				if ((this._userFamily != value))
				{
					this.OnuserFamilyChanging(value);
					this.SendPropertyChanging();
					this._userFamily = value;
					this.SendPropertyChanged("userFamily");
					this.OnuserFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userMobile", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string userMobile
		{
			get
			{
				return this._userMobile;
			}
			set
			{
				if ((this._userMobile != value))
				{
					this.OnuserMobileChanging(value);
					this.SendPropertyChanging();
					this._userMobile = value;
					this.SendPropertyChanged("userMobile");
					this.OnuserMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="paymentTbl_walletTbl", Storage="_walletTbls", ThisKey="Id", OtherKey="paymentId")]
		public EntitySet<walletTbl> walletTbls
		{
			get
			{
				return this._walletTbls;
			}
			set
			{
				this._walletTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_paymentTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.paymentTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.paymentTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_walletTbls(walletTbl entity)
		{
			this.SendPropertyChanging();
			entity.paymentTbl = this;
		}
		
		private void detach_walletTbls(walletTbl entity)
		{
			this.SendPropertyChanging();
			entity.paymentTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.permissionTbl")]
	public partial class permissionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<role_permissionTbl> _role_permissionTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public permissionTbl()
		{
			this._role_permissionTbls = new EntitySet<role_permissionTbl>(new Action<role_permissionTbl>(this.attach_role_permissionTbls), new Action<role_permissionTbl>(this.detach_role_permissionTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="permissionTbl_role_permissionTbl", Storage="_role_permissionTbls", ThisKey="Id", OtherKey="permissionId")]
		public EntitySet<role_permissionTbl> role_permissionTbls
		{
			get
			{
				return this._role_permissionTbls;
			}
			set
			{
				this._role_permissionTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_role_permissionTbls(role_permissionTbl entity)
		{
			this.SendPropertyChanging();
			entity.permissionTbl = this;
		}
		
		private void detach_role_permissionTbls(role_permissionTbl entity)
		{
			this.SendPropertyChanging();
			entity.permissionTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.practitionTbl")]
	public partial class practitionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<clinic_practitionTbl> _clinic_practitionTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public practitionTbl()
		{
			this._clinic_practitionTbls = new EntitySet<clinic_practitionTbl>(new Action<clinic_practitionTbl>(this.attach_clinic_practitionTbls), new Action<clinic_practitionTbl>(this.detach_clinic_practitionTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="practitionTbl_clinic_practitionTbl", Storage="_clinic_practitionTbls", ThisKey="Id", OtherKey="practitionId")]
		public EntitySet<clinic_practitionTbl> clinic_practitionTbls
		{
			get
			{
				return this._clinic_practitionTbls;
			}
			set
			{
				this._clinic_practitionTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clinic_practitionTbls(clinic_practitionTbl entity)
		{
			this.SendPropertyChanging();
			entity.practitionTbl = this;
		}
		
		private void detach_clinic_practitionTbls(clinic_practitionTbl entity)
		{
			this.SendPropertyChanging();
			entity.practitionTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.productCategoryTbl")]
	public partial class productCategoryTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private long _parentId;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<clinic_productTbl> _clinic_productTbls;
		
		private EntitySet<doctor_productTbl> _doctor_productTbls;
		
		private EntitySet<equipment_productTbl> _equipment_productTbls;
		
		private EntitySet<ngo_productTbl> _ngo_productTbls;
		
		private EntitySet<productTbl> _productTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentIdChanging(long value);
    partial void OnparentIdChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public productCategoryTbl()
		{
			this._clinic_productTbls = new EntitySet<clinic_productTbl>(new Action<clinic_productTbl>(this.attach_clinic_productTbls), new Action<clinic_productTbl>(this.detach_clinic_productTbls));
			this._doctor_productTbls = new EntitySet<doctor_productTbl>(new Action<doctor_productTbl>(this.attach_doctor_productTbls), new Action<doctor_productTbl>(this.detach_doctor_productTbls));
			this._equipment_productTbls = new EntitySet<equipment_productTbl>(new Action<equipment_productTbl>(this.attach_equipment_productTbls), new Action<equipment_productTbl>(this.detach_equipment_productTbls));
			this._ngo_productTbls = new EntitySet<ngo_productTbl>(new Action<ngo_productTbl>(this.attach_ngo_productTbls), new Action<ngo_productTbl>(this.detach_ngo_productTbls));
			this._productTbls = new EntitySet<productTbl>(new Action<productTbl>(this.attach_productTbls), new Action<productTbl>(this.detach_productTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="BigInt NOT NULL")]
		public long parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_clinic_productTbl", Storage="_clinic_productTbls", ThisKey="Id", OtherKey="productCategoryId")]
		public EntitySet<clinic_productTbl> clinic_productTbls
		{
			get
			{
				return this._clinic_productTbls;
			}
			set
			{
				this._clinic_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_doctor_productTbl", Storage="_doctor_productTbls", ThisKey="Id", OtherKey="productCategoryId")]
		public EntitySet<doctor_productTbl> doctor_productTbls
		{
			get
			{
				return this._doctor_productTbls;
			}
			set
			{
				this._doctor_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_equipment_productTbl", Storage="_equipment_productTbls", ThisKey="Id", OtherKey="productCategoryId")]
		public EntitySet<equipment_productTbl> equipment_productTbls
		{
			get
			{
				return this._equipment_productTbls;
			}
			set
			{
				this._equipment_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_ngo_productTbl", Storage="_ngo_productTbls", ThisKey="Id", OtherKey="productCategoryId")]
		public EntitySet<ngo_productTbl> ngo_productTbls
		{
			get
			{
				return this._ngo_productTbls;
			}
			set
			{
				this._ngo_productTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_productTbl", Storage="_productTbls", ThisKey="Id", OtherKey="productCategoryId")]
		public EntitySet<productTbl> productTbls
		{
			get
			{
				return this._productTbls;
			}
			set
			{
				this._productTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clinic_productTbls(clinic_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = this;
		}
		
		private void detach_clinic_productTbls(clinic_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = null;
		}
		
		private void attach_doctor_productTbls(doctor_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = this;
		}
		
		private void detach_doctor_productTbls(doctor_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = null;
		}
		
		private void attach_equipment_productTbls(equipment_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = this;
		}
		
		private void detach_equipment_productTbls(equipment_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = null;
		}
		
		private void attach_ngo_productTbls(ngo_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = this;
		}
		
		private void detach_ngo_productTbls(ngo_productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = null;
		}
		
		private void attach_productTbls(productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = this;
		}
		
		private void detach_productTbls(productTbl entity)
		{
			this.SendPropertyChanging();
			entity.productCategoryTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.productGroupTbl")]
	public partial class productGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<clinic_product_productGroupTbl> _clinic_product_productGroupTbls;
		
		private EntitySet<doctor_product_productGroupTbl> _doctor_product_productGroupTbls;
		
		private EntitySet<equipment_product_productGroupTbl> _equipment_product_productGroupTbls;
		
		private EntitySet<ngo_product_productGroupTbl> _ngo_product_productGroupTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public productGroupTbl()
		{
			this._clinic_product_productGroupTbls = new EntitySet<clinic_product_productGroupTbl>(new Action<clinic_product_productGroupTbl>(this.attach_clinic_product_productGroupTbls), new Action<clinic_product_productGroupTbl>(this.detach_clinic_product_productGroupTbls));
			this._doctor_product_productGroupTbls = new EntitySet<doctor_product_productGroupTbl>(new Action<doctor_product_productGroupTbl>(this.attach_doctor_product_productGroupTbls), new Action<doctor_product_productGroupTbl>(this.detach_doctor_product_productGroupTbls));
			this._equipment_product_productGroupTbls = new EntitySet<equipment_product_productGroupTbl>(new Action<equipment_product_productGroupTbl>(this.attach_equipment_product_productGroupTbls), new Action<equipment_product_productGroupTbl>(this.detach_equipment_product_productGroupTbls));
			this._ngo_product_productGroupTbls = new EntitySet<ngo_product_productGroupTbl>(new Action<ngo_product_productGroupTbl>(this.attach_ngo_product_productGroupTbls), new Action<ngo_product_productGroupTbl>(this.detach_ngo_product_productGroupTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_clinic_product_productGroupTbl", Storage="_clinic_product_productGroupTbls", ThisKey="Id", OtherKey="productGroupId")]
		public EntitySet<clinic_product_productGroupTbl> clinic_product_productGroupTbls
		{
			get
			{
				return this._clinic_product_productGroupTbls;
			}
			set
			{
				this._clinic_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_doctor_product_productGroupTbl", Storage="_doctor_product_productGroupTbls", ThisKey="Id", OtherKey="productGroupId")]
		public EntitySet<doctor_product_productGroupTbl> doctor_product_productGroupTbls
		{
			get
			{
				return this._doctor_product_productGroupTbls;
			}
			set
			{
				this._doctor_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_equipment_product_productGroupTbl", Storage="_equipment_product_productGroupTbls", ThisKey="Id", OtherKey="productGroupId")]
		public EntitySet<equipment_product_productGroupTbl> equipment_product_productGroupTbls
		{
			get
			{
				return this._equipment_product_productGroupTbls;
			}
			set
			{
				this._equipment_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productGroupTbl_ngo_product_productGroupTbl", Storage="_ngo_product_productGroupTbls", ThisKey="Id", OtherKey="productGroupId")]
		public EntitySet<ngo_product_productGroupTbl> ngo_product_productGroupTbls
		{
			get
			{
				return this._ngo_product_productGroupTbls;
			}
			set
			{
				this._ngo_product_productGroupTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clinic_product_productGroupTbls(clinic_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = this;
		}
		
		private void detach_clinic_product_productGroupTbls(clinic_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = null;
		}
		
		private void attach_doctor_product_productGroupTbls(doctor_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = this;
		}
		
		private void detach_doctor_product_productGroupTbls(doctor_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = null;
		}
		
		private void attach_equipment_product_productGroupTbls(equipment_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = this;
		}
		
		private void detach_equipment_product_productGroupTbls(equipment_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = null;
		}
		
		private void attach_ngo_product_productGroupTbls(ngo_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = this;
		}
		
		private void detach_ngo_product_productGroupTbls(ngo_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productGroupTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.productTbl")]
	public partial class productTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _code;
		
		private System.Nullable<double> _price;
		
		private bool _isGaranty;
		
		private long _garantyTypeId;
		
		private long _productCategoryId;
		
		private System.DateTime _registerDate;
		
		private EntitySet<clinic_product_productGroupTbl> _clinic_product_productGroupTbls;
		
		private EntitySet<doctor_product_productGroupTbl> _doctor_product_productGroupTbls;
		
		private EntitySet<equipment_product_productGroupTbl> _equipment_product_productGroupTbls;
		
		private EntitySet<ngo_product_productGroupTbl> _ngo_product_productGroupTbls;
		
		private EntityRef<guarantyTypeTbl> _guarantyTypeTbl;
		
		private EntityRef<productCategoryTbl> _productCategoryTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnisGarantyChanging(bool value);
    partial void OnisGarantyChanged();
    partial void OngarantyTypeIdChanging(long value);
    partial void OngarantyTypeIdChanged();
    partial void OnproductCategoryIdChanging(long value);
    partial void OnproductCategoryIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public productTbl()
		{
			this._clinic_product_productGroupTbls = new EntitySet<clinic_product_productGroupTbl>(new Action<clinic_product_productGroupTbl>(this.attach_clinic_product_productGroupTbls), new Action<clinic_product_productGroupTbl>(this.detach_clinic_product_productGroupTbls));
			this._doctor_product_productGroupTbls = new EntitySet<doctor_product_productGroupTbl>(new Action<doctor_product_productGroupTbl>(this.attach_doctor_product_productGroupTbls), new Action<doctor_product_productGroupTbl>(this.detach_doctor_product_productGroupTbls));
			this._equipment_product_productGroupTbls = new EntitySet<equipment_product_productGroupTbl>(new Action<equipment_product_productGroupTbl>(this.attach_equipment_product_productGroupTbls), new Action<equipment_product_productGroupTbl>(this.detach_equipment_product_productGroupTbls));
			this._ngo_product_productGroupTbls = new EntitySet<ngo_product_productGroupTbl>(new Action<ngo_product_productGroupTbl>(this.attach_ngo_product_productGroupTbls), new Action<ngo_product_productGroupTbl>(this.detach_ngo_product_productGroupTbls));
			this._guarantyTypeTbl = default(EntityRef<guarantyTypeTbl>);
			this._productCategoryTbl = default(EntityRef<productCategoryTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isGaranty", DbType="Bit NOT NULL")]
		public bool isGaranty
		{
			get
			{
				return this._isGaranty;
			}
			set
			{
				if ((this._isGaranty != value))
				{
					this.OnisGarantyChanging(value);
					this.SendPropertyChanging();
					this._isGaranty = value;
					this.SendPropertyChanged("isGaranty");
					this.OnisGarantyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_garantyTypeId", DbType="BigInt NOT NULL")]
		public long garantyTypeId
		{
			get
			{
				return this._garantyTypeId;
			}
			set
			{
				if ((this._garantyTypeId != value))
				{
					if (this._guarantyTypeTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngarantyTypeIdChanging(value);
					this.SendPropertyChanging();
					this._garantyTypeId = value;
					this.SendPropertyChanged("garantyTypeId");
					this.OngarantyTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCategoryId", DbType="BigInt NOT NULL")]
		public long productCategoryId
		{
			get
			{
				return this._productCategoryId;
			}
			set
			{
				if ((this._productCategoryId != value))
				{
					if (this._productCategoryTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._productCategoryId = value;
					this.SendPropertyChanged("productCategoryId");
					this.OnproductCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_clinic_product_productGroupTbl", Storage="_clinic_product_productGroupTbls", ThisKey="Id", OtherKey="productId")]
		public EntitySet<clinic_product_productGroupTbl> clinic_product_productGroupTbls
		{
			get
			{
				return this._clinic_product_productGroupTbls;
			}
			set
			{
				this._clinic_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_doctor_product_productGroupTbl", Storage="_doctor_product_productGroupTbls", ThisKey="Id", OtherKey="productId")]
		public EntitySet<doctor_product_productGroupTbl> doctor_product_productGroupTbls
		{
			get
			{
				return this._doctor_product_productGroupTbls;
			}
			set
			{
				this._doctor_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_equipment_product_productGroupTbl", Storage="_equipment_product_productGroupTbls", ThisKey="Id", OtherKey="productId")]
		public EntitySet<equipment_product_productGroupTbl> equipment_product_productGroupTbls
		{
			get
			{
				return this._equipment_product_productGroupTbls;
			}
			set
			{
				this._equipment_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productTbl_ngo_product_productGroupTbl", Storage="_ngo_product_productGroupTbls", ThisKey="Id", OtherKey="productId")]
		public EntitySet<ngo_product_productGroupTbl> ngo_product_productGroupTbls
		{
			get
			{
				return this._ngo_product_productGroupTbls;
			}
			set
			{
				this._ngo_product_productGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="guarantyTypeTbl_productTbl", Storage="_guarantyTypeTbl", ThisKey="garantyTypeId", OtherKey="Id", IsForeignKey=true)]
		public guarantyTypeTbl guarantyTypeTbl
		{
			get
			{
				return this._guarantyTypeTbl.Entity;
			}
			set
			{
				guarantyTypeTbl previousValue = this._guarantyTypeTbl.Entity;
				if (((previousValue != value) 
							|| (this._guarantyTypeTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._guarantyTypeTbl.Entity = null;
						previousValue.productTbls.Remove(this);
					}
					this._guarantyTypeTbl.Entity = value;
					if ((value != null))
					{
						value.productTbls.Add(this);
						this._garantyTypeId = value.Id;
					}
					else
					{
						this._garantyTypeId = default(long);
					}
					this.SendPropertyChanged("guarantyTypeTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productCategoryTbl_productTbl", Storage="_productCategoryTbl", ThisKey="productCategoryId", OtherKey="Id", IsForeignKey=true)]
		public productCategoryTbl productCategoryTbl
		{
			get
			{
				return this._productCategoryTbl.Entity;
			}
			set
			{
				productCategoryTbl previousValue = this._productCategoryTbl.Entity;
				if (((previousValue != value) 
							|| (this._productCategoryTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productCategoryTbl.Entity = null;
						previousValue.productTbls.Remove(this);
					}
					this._productCategoryTbl.Entity = value;
					if ((value != null))
					{
						value.productTbls.Add(this);
						this._productCategoryId = value.Id;
					}
					else
					{
						this._productCategoryId = default(long);
					}
					this.SendPropertyChanged("productCategoryTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clinic_product_productGroupTbls(clinic_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = this;
		}
		
		private void detach_clinic_product_productGroupTbls(clinic_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = null;
		}
		
		private void attach_doctor_product_productGroupTbls(doctor_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = this;
		}
		
		private void detach_doctor_product_productGroupTbls(doctor_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = null;
		}
		
		private void attach_equipment_product_productGroupTbls(equipment_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = this;
		}
		
		private void detach_equipment_product_productGroupTbls(equipment_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = null;
		}
		
		private void attach_ngo_product_productGroupTbls(ngo_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = this;
		}
		
		private void detach_ngo_product_productGroupTbls(ngo_product_productGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.productTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.provinceTbl")]
	public partial class provinceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private EntitySet<cityTbl> _cityTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public provinceTbl()
		{
			this._cityTbls = new EntitySet<cityTbl>(new Action<cityTbl>(this.attach_cityTbls), new Action<cityTbl>(this.detach_cityTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="provinceTbl_cityTbl", Storage="_cityTbls", ThisKey="Id", OtherKey="provinceId")]
		public EntitySet<cityTbl> cityTbls
		{
			get
			{
				return this._cityTbls;
			}
			set
			{
				this._cityTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cityTbls(cityTbl entity)
		{
			this.SendPropertyChanging();
			entity.provinceTbl = this;
		}
		
		private void detach_cityTbls(cityTbl entity)
		{
			this.SendPropertyChanging();
			entity.provinceTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role_permissionTbl")]
	public partial class role_permissionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _permissionId;
		
		private long _roleId;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<permissionTbl> _permissionTbl;
		
		private EntityRef<roleTbl> _roleTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnpermissionIdChanging(long value);
    partial void OnpermissionIdChanged();
    partial void OnroleIdChanging(long value);
    partial void OnroleIdChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public role_permissionTbl()
		{
			this._permissionTbl = default(EntityRef<permissionTbl>);
			this._roleTbl = default(EntityRef<roleTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permissionId", DbType="BigInt NOT NULL")]
		public long permissionId
		{
			get
			{
				return this._permissionId;
			}
			set
			{
				if ((this._permissionId != value))
				{
					if (this._permissionTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpermissionIdChanging(value);
					this.SendPropertyChanging();
					this._permissionId = value;
					this.SendPropertyChanged("permissionId");
					this.OnpermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="BigInt NOT NULL")]
		public long roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._roleTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="permissionTbl_role_permissionTbl", Storage="_permissionTbl", ThisKey="permissionId", OtherKey="Id", IsForeignKey=true)]
		public permissionTbl permissionTbl
		{
			get
			{
				return this._permissionTbl.Entity;
			}
			set
			{
				permissionTbl previousValue = this._permissionTbl.Entity;
				if (((previousValue != value) 
							|| (this._permissionTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._permissionTbl.Entity = null;
						previousValue.role_permissionTbls.Remove(this);
					}
					this._permissionTbl.Entity = value;
					if ((value != null))
					{
						value.role_permissionTbls.Add(this);
						this._permissionId = value.Id;
					}
					else
					{
						this._permissionId = default(long);
					}
					this.SendPropertyChanged("permissionTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_role_permissionTbl", Storage="_roleTbl", ThisKey="roleId", OtherKey="Id", IsForeignKey=true)]
		public roleTbl roleTbl
		{
			get
			{
				return this._roleTbl.Entity;
			}
			set
			{
				roleTbl previousValue = this._roleTbl.Entity;
				if (((previousValue != value) 
							|| (this._roleTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._roleTbl.Entity = null;
						previousValue.role_permissionTbls.Remove(this);
					}
					this._roleTbl.Entity = value;
					if ((value != null))
					{
						value.role_permissionTbls.Add(this);
						this._roleId = value.Id;
					}
					else
					{
						this._roleId = default(long);
					}
					this.SendPropertyChanged("roleTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_role_permissionTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.role_permissionTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.role_permissionTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.roleTbl")]
	public partial class roleTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private byte _status;
		
		private EntitySet<documentTypeTbl> _documentTypeTbls;
		
		private EntitySet<packageTbl> _packageTbls;
		
		private EntitySet<role_permissionTbl> _role_permissionTbls;
		
		private EntitySet<userTbl> _userTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public roleTbl()
		{
			this._documentTypeTbls = new EntitySet<documentTypeTbl>(new Action<documentTypeTbl>(this.attach_documentTypeTbls), new Action<documentTypeTbl>(this.detach_documentTypeTbls));
			this._packageTbls = new EntitySet<packageTbl>(new Action<packageTbl>(this.attach_packageTbls), new Action<packageTbl>(this.detach_packageTbls));
			this._role_permissionTbls = new EntitySet<role_permissionTbl>(new Action<role_permissionTbl>(this.attach_role_permissionTbls), new Action<role_permissionTbl>(this.detach_role_permissionTbls));
			this._userTbls = new EntitySet<userTbl>(new Action<userTbl>(this.attach_userTbls), new Action<userTbl>(this.detach_userTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_documentTypeTbl", Storage="_documentTypeTbls", ThisKey="Id", OtherKey="roleId")]
		public EntitySet<documentTypeTbl> documentTypeTbls
		{
			get
			{
				return this._documentTypeTbls;
			}
			set
			{
				this._documentTypeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_packageTbl", Storage="_packageTbls", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<packageTbl> packageTbls
		{
			get
			{
				return this._packageTbls;
			}
			set
			{
				this._packageTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_role_permissionTbl", Storage="_role_permissionTbls", ThisKey="Id", OtherKey="roleId")]
		public EntitySet<role_permissionTbl> role_permissionTbls
		{
			get
			{
				return this._role_permissionTbls;
			}
			set
			{
				this._role_permissionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_userTbl", Storage="_userTbls", ThisKey="Id", OtherKey="roleId")]
		public EntitySet<userTbl> userTbls
		{
			get
			{
				return this._userTbls;
			}
			set
			{
				this._userTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_documentTypeTbls(documentTypeTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = this;
		}
		
		private void detach_documentTypeTbls(documentTypeTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = null;
		}
		
		private void attach_packageTbls(packageTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = this;
		}
		
		private void detach_packageTbls(packageTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = null;
		}
		
		private void attach_role_permissionTbls(role_permissionTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = this;
		}
		
		private void detach_role_permissionTbls(role_permissionTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = null;
		}
		
		private void attach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = this;
		}
		
		private void detach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.roleTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.serviceTbl")]
	public partial class serviceTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _description;
		
		private byte _status;
		
		private System.DateTime _registerDate;
		
		private EntitySet<clinic_serviceTbl> _clinic_serviceTbls;
		
		private EntitySet<doctor_serviceTbl> _doctor_serviceTbls;
		
		private EntitySet<equipment_serviceTbl> _equipment_serviceTbls;
		
		private EntitySet<ngo_serviceTbl> _ngo_serviceTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public serviceTbl()
		{
			this._clinic_serviceTbls = new EntitySet<clinic_serviceTbl>(new Action<clinic_serviceTbl>(this.attach_clinic_serviceTbls), new Action<clinic_serviceTbl>(this.detach_clinic_serviceTbls));
			this._doctor_serviceTbls = new EntitySet<doctor_serviceTbl>(new Action<doctor_serviceTbl>(this.attach_doctor_serviceTbls), new Action<doctor_serviceTbl>(this.detach_doctor_serviceTbls));
			this._equipment_serviceTbls = new EntitySet<equipment_serviceTbl>(new Action<equipment_serviceTbl>(this.attach_equipment_serviceTbls), new Action<equipment_serviceTbl>(this.detach_equipment_serviceTbls));
			this._ngo_serviceTbls = new EntitySet<ngo_serviceTbl>(new Action<ngo_serviceTbl>(this.attach_ngo_serviceTbls), new Action<ngo_serviceTbl>(this.detach_ngo_serviceTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_clinic_serviceTbl", Storage="_clinic_serviceTbls", ThisKey="Id", OtherKey="serviceId")]
		public EntitySet<clinic_serviceTbl> clinic_serviceTbls
		{
			get
			{
				return this._clinic_serviceTbls;
			}
			set
			{
				this._clinic_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_doctor_serviceTbl", Storage="_doctor_serviceTbls", ThisKey="Id", OtherKey="serviceId")]
		public EntitySet<doctor_serviceTbl> doctor_serviceTbls
		{
			get
			{
				return this._doctor_serviceTbls;
			}
			set
			{
				this._doctor_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_equipment_serviceTbl", Storage="_equipment_serviceTbls", ThisKey="Id", OtherKey="serviceId")]
		public EntitySet<equipment_serviceTbl> equipment_serviceTbls
		{
			get
			{
				return this._equipment_serviceTbls;
			}
			set
			{
				this._equipment_serviceTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceTbl_ngo_serviceTbl", Storage="_ngo_serviceTbls", ThisKey="Id", OtherKey="serviceId")]
		public EntitySet<ngo_serviceTbl> ngo_serviceTbls
		{
			get
			{
				return this._ngo_serviceTbls;
			}
			set
			{
				this._ngo_serviceTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clinic_serviceTbls(clinic_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = this;
		}
		
		private void detach_clinic_serviceTbls(clinic_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = null;
		}
		
		private void attach_doctor_serviceTbls(doctor_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = this;
		}
		
		private void detach_doctor_serviceTbls(doctor_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = null;
		}
		
		private void attach_equipment_serviceTbls(equipment_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = this;
		}
		
		private void detach_equipment_serviceTbls(equipment_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = null;
		}
		
		private void attach_ngo_serviceTbls(ngo_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = this;
		}
		
		private void detach_ngo_serviceTbls(ngo_serviceTbl entity)
		{
			this.SendPropertyChanging();
			entity.serviceTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sessionTbl")]
	public partial class sessionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _subject;
		
		private int _number;
		
		private long _classId;
		
		private System.DateTime _Date;
		
		private System.TimeSpan _startTime;
		
		private System.TimeSpan _endTime;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private byte _status;
		
		private EntityRef<classTbl> _classTbl;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    partial void OnclassIdChanging(long value);
    partial void OnclassIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnstartTimeChanging(System.TimeSpan value);
    partial void OnstartTimeChanged();
    partial void OnendTimeChanging(System.TimeSpan value);
    partial void OnendTimeChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public sessionTbl()
		{
			this._classTbl = default(EntityRef<classTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classId", DbType="BigInt NOT NULL")]
		public long classId
		{
			get
			{
				return this._classId;
			}
			set
			{
				if ((this._classId != value))
				{
					if (this._classTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIdChanging(value);
					this.SendPropertyChanging();
					this._classId = value;
					this.SendPropertyChanged("classId");
					this.OnclassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="Time NOT NULL")]
		public System.TimeSpan startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="Time NOT NULL")]
		public System.TimeSpan endTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if ((this._endTime != value))
				{
					this.OnendTimeChanging(value);
					this.SendPropertyChanging();
					this._endTime = value;
					this.SendPropertyChanged("endTime");
					this.OnendTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="classTbl_sessionTbl", Storage="_classTbl", ThisKey="classId", OtherKey="Id", IsForeignKey=true)]
		public classTbl classTbl
		{
			get
			{
				return this._classTbl.Entity;
			}
			set
			{
				classTbl previousValue = this._classTbl.Entity;
				if (((previousValue != value) 
							|| (this._classTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._classTbl.Entity = null;
						previousValue.sessionTbls.Remove(this);
					}
					this._classTbl.Entity = value;
					if ((value != null))
					{
						value.sessionTbls.Add(this);
						this._classId = value.Id;
					}
					else
					{
						this._classId = default(long);
					}
					this.SendPropertyChanged("classTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_sessionTbl", Storage="_userTbl", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.sessionTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.sessionTbls.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.settingTbl")]
	public partial class settingTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _name;
		
		private string _value;
		
		private string _description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public settingTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(200)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tokenTbl")]
	public partial class tokenTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ownerUserId;
		
		private string _accessTokenHash;
		
		private System.DateTime _accessTokenExpirationDateTime;
		
		private string _refreshTokenIdHash;
		
		private string _subject;
		
		private string _refreshTokenExpiresUtc;
		
		private string _refreshToken;
		
		private EntityRef<userTbl> _userTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnownerUserIdChanging(long value);
    partial void OnownerUserIdChanged();
    partial void OnaccessTokenHashChanging(string value);
    partial void OnaccessTokenHashChanged();
    partial void OnaccessTokenExpirationDateTimeChanging(System.DateTime value);
    partial void OnaccessTokenExpirationDateTimeChanged();
    partial void OnrefreshTokenIdHashChanging(string value);
    partial void OnrefreshTokenIdHashChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnrefreshTokenExpiresUtcChanging(string value);
    partial void OnrefreshTokenExpiresUtcChanged();
    partial void OnrefreshTokenChanging(string value);
    partial void OnrefreshTokenChanged();
    #endregion
		
		public tokenTbl()
		{
			this._userTbl = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerUserId", DbType="BigInt NOT NULL")]
		public long ownerUserId
		{
			get
			{
				return this._ownerUserId;
			}
			set
			{
				if ((this._ownerUserId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnownerUserIdChanging(value);
					this.SendPropertyChanging();
					this._ownerUserId = value;
					this.SendPropertyChanged("ownerUserId");
					this.OnownerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessTokenHash", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string accessTokenHash
		{
			get
			{
				return this._accessTokenHash;
			}
			set
			{
				if ((this._accessTokenHash != value))
				{
					this.OnaccessTokenHashChanging(value);
					this.SendPropertyChanging();
					this._accessTokenHash = value;
					this.SendPropertyChanged("accessTokenHash");
					this.OnaccessTokenHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessTokenExpirationDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime accessTokenExpirationDateTime
		{
			get
			{
				return this._accessTokenExpirationDateTime;
			}
			set
			{
				if ((this._accessTokenExpirationDateTime != value))
				{
					this.OnaccessTokenExpirationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._accessTokenExpirationDateTime = value;
					this.SendPropertyChanged("accessTokenExpirationDateTime");
					this.OnaccessTokenExpirationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refreshTokenIdHash", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string refreshTokenIdHash
		{
			get
			{
				return this._refreshTokenIdHash;
			}
			set
			{
				if ((this._refreshTokenIdHash != value))
				{
					this.OnrefreshTokenIdHashChanging(value);
					this.SendPropertyChanging();
					this._refreshTokenIdHash = value;
					this.SendPropertyChanged("refreshTokenIdHash");
					this.OnrefreshTokenIdHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refreshTokenExpiresUtc", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string refreshTokenExpiresUtc
		{
			get
			{
				return this._refreshTokenExpiresUtc;
			}
			set
			{
				if ((this._refreshTokenExpiresUtc != value))
				{
					this.OnrefreshTokenExpiresUtcChanging(value);
					this.SendPropertyChanging();
					this._refreshTokenExpiresUtc = value;
					this.SendPropertyChanged("refreshTokenExpiresUtc");
					this.OnrefreshTokenExpiresUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refreshToken", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string refreshToken
		{
			get
			{
				return this._refreshToken;
			}
			set
			{
				if ((this._refreshToken != value))
				{
					this.OnrefreshTokenChanging(value);
					this.SendPropertyChanging();
					this._refreshToken = value;
					this.SendPropertyChanged("refreshToken");
					this.OnrefreshTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_tokenTbl", Storage="_userTbl", ThisKey="ownerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.tokenTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.tokenTbls.Add(this);
						this._ownerUserId = value.Id;
					}
					else
					{
						this._ownerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_userGroupTbl")]
	public partial class user_userGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _userGroupId;
		
		private long _userId;
		
		private long _registerUserId;
		
		private System.DateTime _registerDate;
		
		private EntityRef<userGroupTbl> _userGroupTbl;
		
		private EntityRef<userTbl> _userTbl;
		
		private EntityRef<userTbl> _userTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnuserGroupIdChanging(long value);
    partial void OnuserGroupIdChanged();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnregisterUserIdChanging(long value);
    partial void OnregisterUserIdChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    #endregion
		
		public user_userGroupTbl()
		{
			this._userGroupTbl = default(EntityRef<userGroupTbl>);
			this._userTbl = default(EntityRef<userTbl>);
			this._userTbl1 = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userGroupId", DbType="BigInt NOT NULL")]
		public long userGroupId
		{
			get
			{
				return this._userGroupId;
			}
			set
			{
				if ((this._userGroupId != value))
				{
					if (this._userGroupTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._userGroupId = value;
					this.SendPropertyChanged("userGroupId");
					this.OnuserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerUserId", DbType="BigInt NOT NULL")]
		public long registerUserId
		{
			get
			{
				return this._registerUserId;
			}
			set
			{
				if ((this._registerUserId != value))
				{
					if (this._userTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregisterUserIdChanging(value);
					this.SendPropertyChanging();
					this._registerUserId = value;
					this.SendPropertyChanged("registerUserId");
					this.OnregisterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userGroupTbl_user_userGroupTbl", Storage="_userGroupTbl", ThisKey="userGroupId", OtherKey="Id", IsForeignKey=true)]
		public userGroupTbl userGroupTbl
		{
			get
			{
				return this._userGroupTbl.Entity;
			}
			set
			{
				userGroupTbl previousValue = this._userGroupTbl.Entity;
				if (((previousValue != value) 
							|| (this._userGroupTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userGroupTbl.Entity = null;
						previousValue.user_userGroupTbls.Remove(this);
					}
					this._userGroupTbl.Entity = value;
					if ((value != null))
					{
						value.user_userGroupTbls.Add(this);
						this._userGroupId = value.Id;
					}
					else
					{
						this._userGroupId = default(long);
					}
					this.SendPropertyChanged("userGroupTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_user_userGroupTbl", Storage="_userTbl", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl
		{
			get
			{
				return this._userTbl.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl.Entity;
				if (((previousValue != value) 
							|| (this._userTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl.Entity = null;
						previousValue.user_userGroupTbls.Remove(this);
					}
					this._userTbl.Entity = value;
					if ((value != null))
					{
						value.user_userGroupTbls.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(long);
					}
					this.SendPropertyChanged("userTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_user_userGroupTbl1", Storage="_userTbl1", ThisKey="registerUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl1
		{
			get
			{
				return this._userTbl1.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl1.Entity;
				if (((previousValue != value) 
							|| (this._userTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl1.Entity = null;
						previousValue.user_userGroupTbls1.Remove(this);
					}
					this._userTbl1.Entity = value;
					if ((value != null))
					{
						value.user_userGroupTbls1.Add(this);
						this._registerUserId = value.Id;
					}
					else
					{
						this._registerUserId = default(long);
					}
					this.SendPropertyChanged("userTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userGroupTbl")]
	public partial class userGroupTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private long _parentId;
		
		private EntitySet<message_userGroupTbl> _message_userGroupTbls;
		
		private EntitySet<user_userGroupTbl> _user_userGroupTbls;
		
		private EntitySet<userGroupTbl> _userGroupTbls;
		
		private EntityRef<userGroupTbl> _userGroupTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentIdChanging(long value);
    partial void OnparentIdChanged();
    #endregion
		
		public userGroupTbl()
		{
			this._message_userGroupTbls = new EntitySet<message_userGroupTbl>(new Action<message_userGroupTbl>(this.attach_message_userGroupTbls), new Action<message_userGroupTbl>(this.detach_message_userGroupTbls));
			this._user_userGroupTbls = new EntitySet<user_userGroupTbl>(new Action<user_userGroupTbl>(this.attach_user_userGroupTbls), new Action<user_userGroupTbl>(this.detach_user_userGroupTbls));
			this._userGroupTbls = new EntitySet<userGroupTbl>(new Action<userGroupTbl>(this.attach_userGroupTbls), new Action<userGroupTbl>(this.detach_userGroupTbls));
			this._userGroupTbl1 = default(EntityRef<userGroupTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="BigInt NOT NULL")]
		public long parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					if (this._userGroupTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userGroupTbl_message_userGroupTbl", Storage="_message_userGroupTbls", ThisKey="Id", OtherKey="userGroupId")]
		public EntitySet<message_userGroupTbl> message_userGroupTbls
		{
			get
			{
				return this._message_userGroupTbls;
			}
			set
			{
				this._message_userGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userGroupTbl_user_userGroupTbl", Storage="_user_userGroupTbls", ThisKey="Id", OtherKey="userGroupId")]
		public EntitySet<user_userGroupTbl> user_userGroupTbls
		{
			get
			{
				return this._user_userGroupTbls;
			}
			set
			{
				this._user_userGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userGroupTbl_userGroupTbl", Storage="_userGroupTbls", ThisKey="Id", OtherKey="parentId")]
		public EntitySet<userGroupTbl> userGroupTbls
		{
			get
			{
				return this._userGroupTbls;
			}
			set
			{
				this._userGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userGroupTbl_userGroupTbl", Storage="_userGroupTbl1", ThisKey="parentId", OtherKey="Id", IsForeignKey=true)]
		public userGroupTbl userGroupTbl1
		{
			get
			{
				return this._userGroupTbl1.Entity;
			}
			set
			{
				userGroupTbl previousValue = this._userGroupTbl1.Entity;
				if (((previousValue != value) 
							|| (this._userGroupTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userGroupTbl1.Entity = null;
						previousValue.userGroupTbls.Remove(this);
					}
					this._userGroupTbl1.Entity = value;
					if ((value != null))
					{
						value.userGroupTbls.Add(this);
						this._parentId = value.Id;
					}
					else
					{
						this._parentId = default(long);
					}
					this.SendPropertyChanged("userGroupTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_message_userGroupTbls(message_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userGroupTbl = this;
		}
		
		private void detach_message_userGroupTbls(message_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userGroupTbl = null;
		}
		
		private void attach_user_userGroupTbls(user_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userGroupTbl = this;
		}
		
		private void detach_user_userGroupTbls(user_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userGroupTbl = null;
		}
		
		private void attach_userGroupTbls(userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userGroupTbl1 = this;
		}
		
		private void detach_userGroupTbls(userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userGroupTbl1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userTbl")]
	public partial class userTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private string _family;
		
		private string _mobile;
		
		private string _password;
		
		private System.Data.Linq.Binary _imgPersonal;
		
		private string _imgPersonalFileType;
		
		private System.DateTime _lastActivityDate;
		
		private System.DateTime _registerDate;
		
		private bool _isConfirm;
		
		private System.Nullable<long> _confirmUserId;
		
		private string _website;
		
		private string _address;
		
		private System.Nullable<double> _latitude;
		
		private System.Nullable<double> _longitude;
		
		private string _postalCode;
		
		private string _email;
		
		private byte _status;
		
		private double _wallet;
		
		private string _code;
		
		private long _roleId;
		
		private bool _subscribeNewsletter;
		
		private long _cityId;
		
		private string _serialNumber;
		
		private string _ticket;
		
		private string _hashAccessToken;
		
		private string _hashRefreshToken;
		
		private EntitySet<walletTbl> _walletTbls;
		
		private EntitySet<class_userTbl> _class_userTbls;
		
		private EntitySet<classDetailTbl> _classDetailTbls;
		
		private EntitySet<classTbl> _classTbls;
		
		private EntityRef<clinicTbl> _clinicTbl;
		
		private EntitySet<contentCommentTbl> _contentCommentTbls;
		
		private EntitySet<contentDetailTbl> _contentDetailTbls;
		
		private EntitySet<contentLikeTbl> _contentLikeTbls;
		
		private EntitySet<contentTbl> _contentTbls;
		
		private EntitySet<contentTbl> _contentTbls1;
		
		private EntityRef<doctorTbl> _doctorTbl;
		
		private EntitySet<documentTbl> _documentTbls;
		
		private EntityRef<equipmentTbl> _equipmentTbl;
		
		private EntitySet<message_userGroupTbl> _message_userGroupTbls;
		
		private EntitySet<message_userTbl> _message_userTbls;
		
		private EntitySet<message_userTbl> _message_userTbls1;
		
		private EntityRef<ngoTbl> _ngoTbl;
		
		private EntitySet<orderTbl> _orderTbls;
		
		private EntitySet<orderTbl> _orderTbls1;
		
		private EntitySet<packageTbl> _packageTbls;
		
		private EntityRef<patientTbl> _patientTbl;
		
		private EntitySet<paymentTbl> _paymentTbls;
		
		private EntitySet<role_permissionTbl> _role_permissionTbls;
		
		private EntitySet<sessionTbl> _sessionTbls;
		
		private EntitySet<tokenTbl> _tokenTbls;
		
		private EntitySet<user_userGroupTbl> _user_userGroupTbls;
		
		private EntitySet<user_userGroupTbl> _user_userGroupTbls1;
		
		private EntitySet<userTbl> _userTbls;
		
		private EntityRef<cityTbl> _cityTbl;
		
		private EntityRef<roleTbl> _roleTbl;
		
		private EntityRef<userTbl> _userTbl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfamilyChanging(string value);
    partial void OnfamilyChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnimgPersonalChanging(System.Data.Linq.Binary value);
    partial void OnimgPersonalChanged();
    partial void OnimgPersonalFileTypeChanging(string value);
    partial void OnimgPersonalFileTypeChanged();
    partial void OnlastActivityDateChanging(System.DateTime value);
    partial void OnlastActivityDateChanged();
    partial void OnregisterDateChanging(System.DateTime value);
    partial void OnregisterDateChanged();
    partial void OnisConfirmChanging(bool value);
    partial void OnisConfirmChanged();
    partial void OnconfirmUserIdChanging(System.Nullable<long> value);
    partial void OnconfirmUserIdChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnpostalCodeChanging(string value);
    partial void OnpostalCodeChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnwalletChanging(double value);
    partial void OnwalletChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnroleIdChanging(long value);
    partial void OnroleIdChanged();
    partial void OnsubscribeNewsletterChanging(bool value);
    partial void OnsubscribeNewsletterChanged();
    partial void OncityIdChanging(long value);
    partial void OncityIdChanged();
    partial void OnserialNumberChanging(string value);
    partial void OnserialNumberChanged();
    partial void OnticketChanging(string value);
    partial void OnticketChanged();
    partial void OnhashAccessTokenChanging(string value);
    partial void OnhashAccessTokenChanged();
    partial void OnhashRefreshTokenChanging(string value);
    partial void OnhashRefreshTokenChanged();
    #endregion
		
		public userTbl()
		{
			this._walletTbls = new EntitySet<walletTbl>(new Action<walletTbl>(this.attach_walletTbls), new Action<walletTbl>(this.detach_walletTbls));
			this._class_userTbls = new EntitySet<class_userTbl>(new Action<class_userTbl>(this.attach_class_userTbls), new Action<class_userTbl>(this.detach_class_userTbls));
			this._classDetailTbls = new EntitySet<classDetailTbl>(new Action<classDetailTbl>(this.attach_classDetailTbls), new Action<classDetailTbl>(this.detach_classDetailTbls));
			this._classTbls = new EntitySet<classTbl>(new Action<classTbl>(this.attach_classTbls), new Action<classTbl>(this.detach_classTbls));
			this._clinicTbl = default(EntityRef<clinicTbl>);
			this._contentCommentTbls = new EntitySet<contentCommentTbl>(new Action<contentCommentTbl>(this.attach_contentCommentTbls), new Action<contentCommentTbl>(this.detach_contentCommentTbls));
			this._contentDetailTbls = new EntitySet<contentDetailTbl>(new Action<contentDetailTbl>(this.attach_contentDetailTbls), new Action<contentDetailTbl>(this.detach_contentDetailTbls));
			this._contentLikeTbls = new EntitySet<contentLikeTbl>(new Action<contentLikeTbl>(this.attach_contentLikeTbls), new Action<contentLikeTbl>(this.detach_contentLikeTbls));
			this._contentTbls = new EntitySet<contentTbl>(new Action<contentTbl>(this.attach_contentTbls), new Action<contentTbl>(this.detach_contentTbls));
			this._contentTbls1 = new EntitySet<contentTbl>(new Action<contentTbl>(this.attach_contentTbls1), new Action<contentTbl>(this.detach_contentTbls1));
			this._doctorTbl = default(EntityRef<doctorTbl>);
			this._documentTbls = new EntitySet<documentTbl>(new Action<documentTbl>(this.attach_documentTbls), new Action<documentTbl>(this.detach_documentTbls));
			this._equipmentTbl = default(EntityRef<equipmentTbl>);
			this._message_userGroupTbls = new EntitySet<message_userGroupTbl>(new Action<message_userGroupTbl>(this.attach_message_userGroupTbls), new Action<message_userGroupTbl>(this.detach_message_userGroupTbls));
			this._message_userTbls = new EntitySet<message_userTbl>(new Action<message_userTbl>(this.attach_message_userTbls), new Action<message_userTbl>(this.detach_message_userTbls));
			this._message_userTbls1 = new EntitySet<message_userTbl>(new Action<message_userTbl>(this.attach_message_userTbls1), new Action<message_userTbl>(this.detach_message_userTbls1));
			this._ngoTbl = default(EntityRef<ngoTbl>);
			this._orderTbls = new EntitySet<orderTbl>(new Action<orderTbl>(this.attach_orderTbls), new Action<orderTbl>(this.detach_orderTbls));
			this._orderTbls1 = new EntitySet<orderTbl>(new Action<orderTbl>(this.attach_orderTbls1), new Action<orderTbl>(this.detach_orderTbls1));
			this._packageTbls = new EntitySet<packageTbl>(new Action<packageTbl>(this.attach_packageTbls), new Action<packageTbl>(this.detach_packageTbls));
			this._patientTbl = default(EntityRef<patientTbl>);
			this._paymentTbls = new EntitySet<paymentTbl>(new Action<paymentTbl>(this.attach_paymentTbls), new Action<paymentTbl>(this.detach_paymentTbls));
			this._role_permissionTbls = new EntitySet<role_permissionTbl>(new Action<role_permissionTbl>(this.attach_role_permissionTbls), new Action<role_permissionTbl>(this.detach_role_permissionTbls));
			this._sessionTbls = new EntitySet<sessionTbl>(new Action<sessionTbl>(this.attach_sessionTbls), new Action<sessionTbl>(this.detach_sessionTbls));
			this._tokenTbls = new EntitySet<tokenTbl>(new Action<tokenTbl>(this.attach_tokenTbls), new Action<tokenTbl>(this.detach_tokenTbls));
			this._user_userGroupTbls = new EntitySet<user_userGroupTbl>(new Action<user_userGroupTbl>(this.attach_user_userGroupTbls), new Action<user_userGroupTbl>(this.detach_user_userGroupTbls));
			this._user_userGroupTbls1 = new EntitySet<user_userGroupTbl>(new Action<user_userGroupTbl>(this.attach_user_userGroupTbls1), new Action<user_userGroupTbl>(this.detach_user_userGroupTbls1));
			this._userTbls = new EntitySet<userTbl>(new Action<userTbl>(this.attach_userTbls), new Action<userTbl>(this.detach_userTbls));
			this._cityTbl = default(EntityRef<cityTbl>);
			this._roleTbl = default(EntityRef<roleTbl>);
			this._userTbl1 = default(EntityRef<userTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_family", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string family
		{
			get
			{
				return this._family;
			}
			set
			{
				if ((this._family != value))
				{
					this.OnfamilyChanging(value);
					this.SendPropertyChanging();
					this._family = value;
					this.SendPropertyChanged("family");
					this.OnfamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgPersonal", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imgPersonal
		{
			get
			{
				return this._imgPersonal;
			}
			set
			{
				if ((this._imgPersonal != value))
				{
					this.OnimgPersonalChanging(value);
					this.SendPropertyChanging();
					this._imgPersonal = value;
					this.SendPropertyChanged("imgPersonal");
					this.OnimgPersonalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgPersonalFileType", DbType="NVarChar(50)")]
		public string imgPersonalFileType
		{
			get
			{
				return this._imgPersonalFileType;
			}
			set
			{
				if ((this._imgPersonalFileType != value))
				{
					this.OnimgPersonalFileTypeChanging(value);
					this.SendPropertyChanging();
					this._imgPersonalFileType = value;
					this.SendPropertyChanged("imgPersonalFileType");
					this.OnimgPersonalFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime lastActivityDate
		{
			get
			{
				return this._lastActivityDate;
			}
			set
			{
				if ((this._lastActivityDate != value))
				{
					this.OnlastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._lastActivityDate = value;
					this.SendPropertyChanged("lastActivityDate");
					this.OnlastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime NOT NULL")]
		public System.DateTime registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConfirm", DbType="Bit NOT NULL")]
		public bool isConfirm
		{
			get
			{
				return this._isConfirm;
			}
			set
			{
				if ((this._isConfirm != value))
				{
					this.OnisConfirmChanging(value);
					this.SendPropertyChanging();
					this._isConfirm = value;
					this.SendPropertyChanged("isConfirm");
					this.OnisConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmUserId", DbType="BigInt")]
		public System.Nullable<long> confirmUserId
		{
			get
			{
				return this._confirmUserId;
			}
			set
			{
				if ((this._confirmUserId != value))
				{
					if (this._userTbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnconfirmUserIdChanging(value);
					this.SendPropertyChanging();
					this._confirmUserId = value;
					this.SendPropertyChanged("confirmUserId");
					this.OnconfirmUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="NVarChar(200)")]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(200)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalCode", DbType="Char(10)")]
		public string postalCode
		{
			get
			{
				return this._postalCode;
			}
			set
			{
				if ((this._postalCode != value))
				{
					this.OnpostalCodeChanging(value);
					this.SendPropertyChanging();
					this._postalCode = value;
					this.SendPropertyChanged("postalCode");
					this.OnpostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(200)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wallet", DbType="Float NOT NULL")]
		public double wallet
		{
			get
			{
				return this._wallet;
			}
			set
			{
				if ((this._wallet != value))
				{
					this.OnwalletChanging(value);
					this.SendPropertyChanging();
					this._wallet = value;
					this.SendPropertyChanged("wallet");
					this.OnwalletChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NVarChar(50)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="BigInt NOT NULL")]
		public long roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._roleTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subscribeNewsletter", DbType="Bit NOT NULL")]
		public bool subscribeNewsletter
		{
			get
			{
				return this._subscribeNewsletter;
			}
			set
			{
				if ((this._subscribeNewsletter != value))
				{
					this.OnsubscribeNewsletterChanging(value);
					this.SendPropertyChanging();
					this._subscribeNewsletter = value;
					this.SendPropertyChanged("subscribeNewsletter");
					this.OnsubscribeNewsletterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityId", DbType="BigInt NOT NULL")]
		public long cityId
		{
			get
			{
				return this._cityId;
			}
			set
			{
				if ((this._cityId != value))
				{
					if (this._cityTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncityIdChanging(value);
					this.SendPropertyChanging();
					this._cityId = value;
					this.SendPropertyChanged("cityId");
					this.OncityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serialNumber", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string serialNumber
		{
			get
			{
				return this._serialNumber;
			}
			set
			{
				if ((this._serialNumber != value))
				{
					this.OnserialNumberChanging(value);
					this.SendPropertyChanging();
					this._serialNumber = value;
					this.SendPropertyChanged("serialNumber");
					this.OnserialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ticket
		{
			get
			{
				return this._ticket;
			}
			set
			{
				if ((this._ticket != value))
				{
					this.OnticketChanging(value);
					this.SendPropertyChanging();
					this._ticket = value;
					this.SendPropertyChanged("ticket");
					this.OnticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hashAccessToken", DbType="NVarChar(50)")]
		public string hashAccessToken
		{
			get
			{
				return this._hashAccessToken;
			}
			set
			{
				if ((this._hashAccessToken != value))
				{
					this.OnhashAccessTokenChanging(value);
					this.SendPropertyChanging();
					this._hashAccessToken = value;
					this.SendPropertyChanged("hashAccessToken");
					this.OnhashAccessTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hashRefreshToken", DbType="NVarChar(50)")]
		public string hashRefreshToken
		{
			get
			{
				return this._hashRefreshToken;
			}
			set
			{
				if ((this._hashRefreshToken != value))
				{
					this.OnhashRefreshTokenChanging(value);
					this.SendPropertyChanging();
					this._hashRefreshToken = value;
					this.SendPropertyChanged("hashRefreshToken");
					this.OnhashRefreshTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_walletTbl", Storage="_walletTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<walletTbl> walletTbls
		{
			get
			{
				return this._walletTbls;
			}
			set
			{
				this._walletTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_class_userTbl", Storage="_class_userTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<class_userTbl> class_userTbls
		{
			get
			{
				return this._class_userTbls;
			}
			set
			{
				this._class_userTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_classDetailTbl", Storage="_classDetailTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<classDetailTbl> classDetailTbls
		{
			get
			{
				return this._classDetailTbls;
			}
			set
			{
				this._classDetailTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_classTbl", Storage="_classTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<classTbl> classTbls
		{
			get
			{
				return this._classTbls;
			}
			set
			{
				this._classTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_clinicTbl", Storage="_clinicTbl", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public clinicTbl clinicTbl
		{
			get
			{
				return this._clinicTbl.Entity;
			}
			set
			{
				clinicTbl previousValue = this._clinicTbl.Entity;
				if (((previousValue != value) 
							|| (this._clinicTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._clinicTbl.Entity = null;
						previousValue.userTbl = null;
					}
					this._clinicTbl.Entity = value;
					if ((value != null))
					{
						value.userTbl = this;
					}
					this.SendPropertyChanged("clinicTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentCommentTbl", Storage="_contentCommentTbls", ThisKey="Id", OtherKey="confirmUserId")]
		public EntitySet<contentCommentTbl> contentCommentTbls
		{
			get
			{
				return this._contentCommentTbls;
			}
			set
			{
				this._contentCommentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentDetailTbl", Storage="_contentDetailTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<contentDetailTbl> contentDetailTbls
		{
			get
			{
				return this._contentDetailTbls;
			}
			set
			{
				this._contentDetailTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentLikeTbl", Storage="_contentLikeTbls", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<contentLikeTbl> contentLikeTbls
		{
			get
			{
				return this._contentLikeTbls;
			}
			set
			{
				this._contentLikeTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentTbl", Storage="_contentTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<contentTbl> contentTbls
		{
			get
			{
				return this._contentTbls;
			}
			set
			{
				this._contentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_contentTbl1", Storage="_contentTbls1", ThisKey="Id", OtherKey="confirmUserId")]
		public EntitySet<contentTbl> contentTbls1
		{
			get
			{
				return this._contentTbls1;
			}
			set
			{
				this._contentTbls1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_doctorTbl", Storage="_doctorTbl", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public doctorTbl doctorTbl
		{
			get
			{
				return this._doctorTbl.Entity;
			}
			set
			{
				doctorTbl previousValue = this._doctorTbl.Entity;
				if (((previousValue != value) 
							|| (this._doctorTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctorTbl.Entity = null;
						previousValue.userTbl = null;
					}
					this._doctorTbl.Entity = value;
					if ((value != null))
					{
						value.userTbl = this;
					}
					this.SendPropertyChanged("doctorTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_documentTbl", Storage="_documentTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<documentTbl> documentTbls
		{
			get
			{
				return this._documentTbls;
			}
			set
			{
				this._documentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_equipmentTbl", Storage="_equipmentTbl", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public equipmentTbl equipmentTbl
		{
			get
			{
				return this._equipmentTbl.Entity;
			}
			set
			{
				equipmentTbl previousValue = this._equipmentTbl.Entity;
				if (((previousValue != value) 
							|| (this._equipmentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._equipmentTbl.Entity = null;
						previousValue.userTbl = null;
					}
					this._equipmentTbl.Entity = value;
					if ((value != null))
					{
						value.userTbl = this;
					}
					this.SendPropertyChanged("equipmentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_message_userGroupTbl", Storage="_message_userGroupTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<message_userGroupTbl> message_userGroupTbls
		{
			get
			{
				return this._message_userGroupTbls;
			}
			set
			{
				this._message_userGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_message_userTbl", Storage="_message_userTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<message_userTbl> message_userTbls
		{
			get
			{
				return this._message_userTbls;
			}
			set
			{
				this._message_userTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_message_userTbl1", Storage="_message_userTbls1", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<message_userTbl> message_userTbls1
		{
			get
			{
				return this._message_userTbls1;
			}
			set
			{
				this._message_userTbls1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_ngoTbl", Storage="_ngoTbl", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public ngoTbl ngoTbl
		{
			get
			{
				return this._ngoTbl.Entity;
			}
			set
			{
				ngoTbl previousValue = this._ngoTbl.Entity;
				if (((previousValue != value) 
							|| (this._ngoTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ngoTbl.Entity = null;
						previousValue.userTbl = null;
					}
					this._ngoTbl.Entity = value;
					if ((value != null))
					{
						value.userTbl = this;
					}
					this.SendPropertyChanged("ngoTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_orderTbl", Storage="_orderTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<orderTbl> orderTbls
		{
			get
			{
				return this._orderTbls;
			}
			set
			{
				this._orderTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_orderTbl1", Storage="_orderTbls1", ThisKey="Id", OtherKey="cancelerId")]
		public EntitySet<orderTbl> orderTbls1
		{
			get
			{
				return this._orderTbls1;
			}
			set
			{
				this._orderTbls1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_packageTbl", Storage="_packageTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<packageTbl> packageTbls
		{
			get
			{
				return this._packageTbls;
			}
			set
			{
				this._packageTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_patientTbl", Storage="_patientTbl", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public patientTbl patientTbl
		{
			get
			{
				return this._patientTbl.Entity;
			}
			set
			{
				patientTbl previousValue = this._patientTbl.Entity;
				if (((previousValue != value) 
							|| (this._patientTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._patientTbl.Entity = null;
						previousValue.userTbl = null;
					}
					this._patientTbl.Entity = value;
					if ((value != null))
					{
						value.userTbl = this;
					}
					this.SendPropertyChanged("patientTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_paymentTbl", Storage="_paymentTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<paymentTbl> paymentTbls
		{
			get
			{
				return this._paymentTbls;
			}
			set
			{
				this._paymentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_role_permissionTbl", Storage="_role_permissionTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<role_permissionTbl> role_permissionTbls
		{
			get
			{
				return this._role_permissionTbls;
			}
			set
			{
				this._role_permissionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_sessionTbl", Storage="_sessionTbls", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<sessionTbl> sessionTbls
		{
			get
			{
				return this._sessionTbls;
			}
			set
			{
				this._sessionTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_tokenTbl", Storage="_tokenTbls", ThisKey="Id", OtherKey="ownerUserId")]
		public EntitySet<tokenTbl> tokenTbls
		{
			get
			{
				return this._tokenTbls;
			}
			set
			{
				this._tokenTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_user_userGroupTbl", Storage="_user_userGroupTbls", ThisKey="Id", OtherKey="userId")]
		public EntitySet<user_userGroupTbl> user_userGroupTbls
		{
			get
			{
				return this._user_userGroupTbls;
			}
			set
			{
				this._user_userGroupTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_user_userGroupTbl1", Storage="_user_userGroupTbls1", ThisKey="Id", OtherKey="registerUserId")]
		public EntitySet<user_userGroupTbl> user_userGroupTbls1
		{
			get
			{
				return this._user_userGroupTbls1;
			}
			set
			{
				this._user_userGroupTbls1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_userTbl", Storage="_userTbls", ThisKey="Id", OtherKey="confirmUserId")]
		public EntitySet<userTbl> userTbls
		{
			get
			{
				return this._userTbls;
			}
			set
			{
				this._userTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cityTbl_userTbl", Storage="_cityTbl", ThisKey="cityId", OtherKey="Id", IsForeignKey=true)]
		public cityTbl cityTbl
		{
			get
			{
				return this._cityTbl.Entity;
			}
			set
			{
				cityTbl previousValue = this._cityTbl.Entity;
				if (((previousValue != value) 
							|| (this._cityTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cityTbl.Entity = null;
						previousValue.userTbls.Remove(this);
					}
					this._cityTbl.Entity = value;
					if ((value != null))
					{
						value.userTbls.Add(this);
						this._cityId = value.Id;
					}
					else
					{
						this._cityId = default(long);
					}
					this.SendPropertyChanged("cityTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="roleTbl_userTbl", Storage="_roleTbl", ThisKey="roleId", OtherKey="Id", IsForeignKey=true)]
		public roleTbl roleTbl
		{
			get
			{
				return this._roleTbl.Entity;
			}
			set
			{
				roleTbl previousValue = this._roleTbl.Entity;
				if (((previousValue != value) 
							|| (this._roleTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._roleTbl.Entity = null;
						previousValue.userTbls.Remove(this);
					}
					this._roleTbl.Entity = value;
					if ((value != null))
					{
						value.userTbls.Add(this);
						this._roleId = value.Id;
					}
					else
					{
						this._roleId = default(long);
					}
					this.SendPropertyChanged("roleTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userTbl_userTbl", Storage="_userTbl1", ThisKey="confirmUserId", OtherKey="Id", IsForeignKey=true)]
		public userTbl userTbl1
		{
			get
			{
				return this._userTbl1.Entity;
			}
			set
			{
				userTbl previousValue = this._userTbl1.Entity;
				if (((previousValue != value) 
							|| (this._userTbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userTbl1.Entity = null;
						previousValue.userTbls.Remove(this);
					}
					this._userTbl1.Entity = value;
					if ((value != null))
					{
						value.userTbls.Add(this);
						this._confirmUserId = value.Id;
					}
					else
					{
						this._confirmUserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("userTbl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_walletTbls(walletTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_walletTbls(walletTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_class_userTbls(class_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_class_userTbls(class_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_classDetailTbls(classDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_classDetailTbls(classDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_classTbls(classTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_classTbls(classTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_contentCommentTbls(contentCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_contentCommentTbls(contentCommentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_contentDetailTbls(contentDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_contentDetailTbls(contentDetailTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_contentLikeTbls(contentLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_contentLikeTbls(contentLikeTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_contentTbls(contentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_contentTbls(contentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_contentTbls1(contentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = this;
		}
		
		private void detach_contentTbls1(contentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = null;
		}
		
		private void attach_documentTbls(documentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_documentTbls(documentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_message_userGroupTbls(message_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_message_userGroupTbls(message_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_message_userTbls(message_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_message_userTbls(message_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_message_userTbls1(message_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = this;
		}
		
		private void detach_message_userTbls1(message_userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = null;
		}
		
		private void attach_orderTbls(orderTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_orderTbls(orderTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_orderTbls1(orderTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = this;
		}
		
		private void detach_orderTbls1(orderTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = null;
		}
		
		private void attach_packageTbls(packageTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_packageTbls(packageTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_paymentTbls(paymentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_paymentTbls(paymentTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_role_permissionTbls(role_permissionTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_role_permissionTbls(role_permissionTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_sessionTbls(sessionTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_sessionTbls(sessionTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_tokenTbls(tokenTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_tokenTbls(tokenTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_user_userGroupTbls(user_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = this;
		}
		
		private void detach_user_userGroupTbls(user_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl = null;
		}
		
		private void attach_user_userGroupTbls1(user_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = this;
		}
		
		private void detach_user_userGroupTbls1(user_userGroupTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = null;
		}
		
		private void attach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = this;
		}
		
		private void detach_userTbls(userTbl entity)
		{
			this.SendPropertyChanging();
			entity.userTbl1 = null;
		}
	}
}
#pragma warning restore 1591
